# 程序设计语言原理-阅读笔记与心得

标签（空格分隔）： 未分类

---

这本书其实讲的很浅，大部分很快能看完，有的章节还是值得过一过的。

- 第1，2二章都是讲述历史，可以很快翻过。
- 第3章，讲述语法和语义，主要讲述了。 
1）BNF，正则文法，和上下文无关文法。
2型文法：就是上下文无关文法：w1->w2,其中w1是非终结符的单个符号
3型文法：正则文法：w1->w2,其中w1=A,w2=aB或者a
BNF:就是2型文法，上下文无关文法。它是将所有的同一个非终结符的所有产生式合并成一个式子，而不是一个个列出。来。
2）属性文法：就是上下文无关文法的一种扩展，它每个节点有计算各种属性的函数。

- 第4章，词法分析和语法分析
1）词法分析：有限自动机，正则文法
2）语法分析：LL和LR，LL的实现我们都是用递归下降程序来实现的，一个因为是不断分解，然后是递归调用，所以就叫递归下降分析。

- 第5章，名字，绑定，类型检测和作用域
1）动态类型绑定，还是静态类型绑定，这是区分静态类型还是动态类型。
JS动态类型绑定：
LIST = 3
LIST = [1,2,3]
这个类型是动态的，一个引用指向动态堆里面。
2）显示堆动态变量，隐私堆动态变量
java都是显示的，像JS的就是隐式的
3）类型检测，强类型和弱类型
**如果一个语言所有绑定都是静态的，那么肯定能进行静态类型检测。**
但是静态检测不一定能发现所有错误，也需要进行动态类型检测。**强类型：一种简单的定义，就是类型都是静态绑定的，那么就是强类型。完整定义：只要一种程序总能发现类型错误，那么它就是强类型的。**
C，C++不是，因为有UNION类型。
总结：
静态类型，动态类型
强类型 弱类型
类型安全 类型不安全
动态绑定类型的，肯定类型不安全。
 4）静态作用域和动态作用域
块作用域。
静态：定义时就确定了的。
动态：运行时才能确定，调用环境。
 5）变量的生存期和生存域

- 第6，7，8章跳过
- 第9章 子程序
子程序：包括过程和函数。
过程是：定义参数化计算的语句序列

参数传递的几种方式：按值，按名，按引用。
函数副作用问题
通用子程序：C++模板

- 第10章 实现子程序（很多语言的内存模型跟C的内存模型不一样）
编译的时候都会有动态链接：其实也就是活动调用链

PS：对比一下C的内存模型和JAVA的
最难的：具有栈态变量且有非局部作用域的嵌套子程序。
C语言：具有栈动态变量且有局部作用域。
JS：具有栈态变量且有非局部作用域的嵌套子程序。
先通过调用记录找到那个活动记录，然后通过局部偏移找到那个变量。

嵌套子程序：
有的程序的栈上会有两个链接
静态链和动态链，也就是两条链接

静态链；静态作用域,编译时就可以判断出作用域的范围了。
动态链：动态作用域,非局部变量的深访问和浅访问只是实现方式不一样，没有本质却别。

这两个链接也称为：控制链和访问链
静态作用域：又叫词法作用域

块级作用域：JS不支持块级作用域，会进行提升(Lifting).

```
1 int x = 1;
2 int g(int z) { return x + z; }
3 int f(int y)
4 {
5          int x = y + 1;
6          return g(y*x);
7 }
8 f(3);
```
```


我们要知道js是遵循静态作用域的。举个例子：      
var foo=1;       
function static(){                
    alert(foo);        
}      

!function(){            
    var foo=2;             
    static();      
}(); 

在js中，会弹出1而非2，因为static的scope在创建时，记录的foo是1。
```
- 第11章 抽象数据类型

进行数据信息隐藏
数据抽象：
分为两部分：
接口 实现（这是java和C++中这么做的）
包括用类来封装数据和数据操作
模板类 泛型
C：可以使用头文件来隐藏。

- 第12章 支持面对对象的程序设计

三个概念：抽象数据类型，继承，动态绑定
子类型和子类的区别

动态绑定：JAVA C++

JS的对象模型：
JS中的对象既是对象又是对象模型，跟面向对象的对象不是一个概念，JS不是面向对象的。

面向对象的实现：
虚方法表：实现动态绑定

- 第13章 并发
语言支持：主要有三种 信号量 管程 消息传递
信号量：生产者 消费者
管程：把共享数据放在管程之中，而不是放在任何一个客户单位之中。执行结束以后，另一个来执行。
消息传递：同步和异步

第14章 函数式程序设计语言
第15章 PROLOG


