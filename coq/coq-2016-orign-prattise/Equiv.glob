DIGEST ab851339d8685550438135fbfa6be56b
FEquiv
R53:65 Coq.Bool.Bool <> <> lib
R83:97 Coq.Arith.Arith <> <> lib
R115:129 Coq.Arith.EqNat <> <> lib
R147:161 Coq.omega.Omega <> <> lib
R179:192 Coq.Lists.List <> <> lib
R210:243 Coq.Logic.FunctionalExtensionality <> <> lib
R284:288 SfLib <> <> lib
R306:309 Maps <> <> lib
R327:329 Imp <> <> lib
def 2575:2580 <> aequiv
R2591:2594 Imp <> aexp ind
R2620:2624 Imp <> state def
R2643:2645 Coq.Init.Logic <> :type_scope:x_'='_x not
R2632:2636 Imp <> aeval def
R2641:2642 Equiv <> a1 var
R2638:2639 Equiv <> st var
R2646:2650 Imp <> aeval def
R2655:2656 Equiv <> a2 var
R2652:2653 Equiv <> st var
def 2671:2676 <> bequiv
R2687:2690 Imp <> bexp ind
R2716:2720 Imp <> state def
R2739:2741 Coq.Init.Logic <> :type_scope:x_'='_x not
R2728:2732 Imp <> beval def
R2737:2738 Equiv <> b1 var
R2734:2735 Equiv <> st var
R2742:2746 Imp <> beval def
R2751:2752 Equiv <> b2 var
R2748:2749 Equiv <> st var
def 3424:3429 <> cequiv
R3440:3442 Imp <> com ind
R3474:3478 Imp <> state def
R3486:3486 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3501:3507 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3522:3522 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3489:3491 Imp <> ::x_'/'_x_'\\'_x not
R3494:3497 Imp <> ::x_'/'_x_'\\'_x not
R3487:3488 Equiv <> c1 var
R3492:3493 Equiv <> st var
R3498:3500 Equiv <> st' var
R3510:3512 Imp <> ::x_'/'_x_'\\'_x not
R3515:3518 Imp <> ::x_'/'_x_'\\'_x not
R3508:3509 Equiv <> c2 var
R3513:3514 Equiv <> st var
R3519:3521 Equiv <> st' var
def 4097:4102 <> prog_a
R4106:4108 Imp <> com ind
R4115:4120 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4148:4155 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4184:4189 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4121:4124 Imp <> BNot constr
R4127:4129 Imp <> BLe constr
R4140:4143 Imp <> ANum constr
R4132:4134 Imp <> AId constr
R4136:4136 Imp <> X def
R4157:4161 Imp <> ::x_'::='_x not
R4156:4156 Imp <> X def
R4162:4166 Imp <> APlus constr
R4177:4180 Imp <> ANum constr
R4169:4171 Imp <> AId constr
R4173:4173 Imp <> X def
def 4204:4209 <> prog_b
R4213:4215 Imp <> com ind
R4332:4336 Imp <> ::x_';;'_x not
R4222:4225 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4246:4255 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4303:4314 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4327:4331 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4226:4228 Imp <> BEq constr
R4239:4242 Imp <> ANum constr
R4231:4233 Imp <> AId constr
R4235:4235 Imp <> X def
R4284:4290 Imp <> ::x_';;'_x not
R4257:4261 Imp <> ::x_'::='_x not
R4256:4256 Imp <> X def
R4262:4266 Imp <> APlus constr
R4277:4280 Imp <> ANum constr
R4269:4271 Imp <> AId constr
R4273:4273 Imp <> X def
R4292:4296 Imp <> ::x_'::='_x not
R4291:4291 Imp <> Y def
R4297:4300 Imp <> ANum constr
R4316:4320 Imp <> ::x_'::='_x not
R4315:4315 Imp <> Y def
R4321:4324 Imp <> ANum constr
R4365:4369 Imp <> ::x_';;'_x not
R4338:4342 Imp <> ::x_'::='_x not
R4337:4337 Imp <> X def
R4343:4348 Imp <> AMinus constr
R4359:4361 Imp <> AId constr
R4363:4363 Imp <> Y def
R4351:4353 Imp <> AId constr
R4355:4355 Imp <> X def
R4371:4375 Imp <> ::x_'::='_x not
R4370:4370 Imp <> Y def
R4376:4379 Imp <> ANum constr
def 4396:4401 <> prog_c
R4405:4407 Imp <> com ind
R4414:4417 Imp <> ::'SKIP' not
def 4432:4437 <> prog_d
R4441:4443 Imp <> com ind
R4450:4455 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4483:4490 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4535:4540 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4456:4459 Imp <> BNot constr
R4462:4464 Imp <> BEq constr
R4475:4478 Imp <> ANum constr
R4467:4469 Imp <> AId constr
R4471:4471 Imp <> X def
R4492:4496 Imp <> ::x_'::='_x not
R4491:4491 Imp <> X def
R4497:4501 Imp <> APlus constr
R4528:4531 Imp <> ANum constr
R4504:4508 Imp <> AMult constr
R4519:4521 Imp <> AId constr
R4523:4523 Imp <> Y def
R4511:4513 Imp <> AId constr
R4515:4515 Imp <> X def
def 4555:4560 <> prog_e
R4564:4566 Imp <> com ind
R4574:4578 Imp <> ::x_'::='_x not
R4573:4573 Imp <> Y def
R4579:4582 Imp <> ANum constr
def 4599:4604 <> prog_f
R4608:4610 Imp <> com ind
R4645:4649 Imp <> ::x_';;'_x not
R4618:4622 Imp <> ::x_'::='_x not
R4617:4617 Imp <> Y def
R4623:4627 Imp <> APlus constr
R4638:4641 Imp <> ANum constr
R4630:4632 Imp <> AId constr
R4634:4634 Imp <> X def
R4650:4655 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4682:4689 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4718:4723 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4656:4659 Imp <> BNot constr
R4662:4664 Imp <> BEq constr
R4675:4677 Imp <> AId constr
R4679:4679 Imp <> Y def
R4667:4669 Imp <> AId constr
R4671:4671 Imp <> X def
R4691:4695 Imp <> ::x_'::='_x not
R4690:4690 Imp <> Y def
R4696:4700 Imp <> APlus constr
R4711:4714 Imp <> ANum constr
R4703:4705 Imp <> AId constr
R4707:4707 Imp <> X def
def 4738:4743 <> prog_g
R4747:4749 Imp <> com ind
R4756:4761 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4767:4774 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4779:4784 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4762:4766 Imp <> BTrue constr
R4775:4778 Imp <> ::'SKIP' not
def 4799:4804 <> prog_h
R4808:4810 Imp <> com ind
R4817:4822 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4849:4856 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4885:4890 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4823:4826 Imp <> BNot constr
R4829:4831 Imp <> BEq constr
R4842:4844 Imp <> AId constr
R4846:4846 Imp <> X def
R4834:4836 Imp <> AId constr
R4838:4838 Imp <> X def
R4858:4862 Imp <> ::x_'::='_x not
R4857:4857 Imp <> X def
R4863:4867 Imp <> APlus constr
R4878:4881 Imp <> ANum constr
R4870:4872 Imp <> AId constr
R4874:4874 Imp <> X def
def 4905:4910 <> prog_i
R4914:4916 Imp <> com ind
R4923:4928 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4955:4962 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4991:4996 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4929:4932 Imp <> BNot constr
R4935:4937 Imp <> BEq constr
R4948:4950 Imp <> AId constr
R4952:4952 Imp <> Y def
R4940:4942 Imp <> AId constr
R4944:4944 Imp <> X def
R4964:4968 Imp <> ::x_'::='_x not
R4963:4963 Imp <> X def
R4969:4973 Imp <> APlus constr
R4984:4987 Imp <> ANum constr
R4976:4978 Imp <> AId constr
R4980:4980 Imp <> Y def
def 5011:5023 <> equiv_classes
R5027:5030 Coq.Init.Datatypes <> list ind
R5033:5036 Coq.Init.Datatypes <> list ind
R5038:5040 Imp <> com ind
R5066:5067 Coq.Lists.List ListNotations :list_scope:'['_x_';'_'..'_';'_x_']' not
R5076:5084 Coq.Lists.List ListNotations :list_scope:'['_x_';'_'..'_';'_x_']' not
R5093:5094 Coq.Lists.List ListNotations :list_scope:'['_x_';'_'..'_';'_x_']' not
R5085:5085 Coq.Lists.List ListNotations :list_scope:'['_x_';'_'..'_';'_x_']' not
R5092:5092 Coq.Lists.List ListNotations :list_scope:'['_x_';'_'..'_';'_x_']' not
R5086:5091 Equiv <> prog_g def
R5068:5068 Coq.Lists.List ListNotations :list_scope:'['_x_';'_'..'_';'_x_']' not
R5075:5075 Coq.Lists.List ListNotations :list_scope:'['_x_';'_'..'_';'_x_']' not
R5069:5074 Equiv <> prog_c def
prf 5295:5308 <> aequiv_example
R5313:5318 Equiv <> aequiv def
R5346:5349 Imp <> ANum constr
R5321:5326 Imp <> AMinus constr
R5337:5339 Imp <> AId constr
R5341:5341 Imp <> X def
R5329:5331 Imp <> AId constr
R5333:5333 Imp <> X def
prf 5403:5416 <> bequiv_example
R5421:5426 Equiv <> bequiv def
R5468:5472 Imp <> BTrue constr
R5429:5431 Imp <> BEq constr
R5459:5462 Imp <> ANum constr
R5434:5439 Imp <> AMinus constr
R5450:5452 Imp <> AId constr
R5454:5454 Imp <> X def
R5442:5444 Imp <> AId constr
R5446:5446 Imp <> X def
R5502:5506 Imp <> beval def
R5519:5532 Equiv <> aequiv_example thm
R5519:5532 Equiv <> aequiv_example thm
prf 5692:5700 <> skip_left
R5715:5720 Equiv <> cequiv def
R5743:5743 Equiv <> c var
R5732:5734 Imp <> ::x_';;'_x not
R5728:5731 Imp <> ::'SKIP' not
R5735:5735 Equiv <> c var
R5916:5920 Imp <> E_Seq constr
R5916:5920 Imp <> E_Seq constr
R5941:5946 Imp <> E_Skip constr
R5941:5946 Imp <> E_Skip constr
prf 6111:6120 <> skip_right
R6135:6140 Equiv <> cequiv def
R6162:6162 Equiv <> c var
R6148:6151 Imp <> ::x_';;'_x not
R6147:6147 Equiv <> c var
R6152:6155 Imp <> ::'SKIP' not
R6291:6295 Imp <> E_Seq constr
R6291:6295 Imp <> E_Seq constr
R6323:6328 Imp <> E_Skip constr
R6323:6328 Imp <> E_Skip constr
prf 6447:6461 <> IFB_true_simple
R6480:6485 Equiv <> cequiv def
R6526:6527 Equiv <> c1 var
R6492:6495 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6501:6506 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6509:6514 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6517:6519 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6496:6500 Imp <> BTrue constr
R6507:6508 Equiv <> c1 var
R6515:6516 Equiv <> c2 var
R6658:6665 Imp <> E_IfTrue constr
R6658:6665 Imp <> E_IfTrue constr
prf 8577:8584 <> IFB_true
R8632:8637 Equiv <> cequiv def
R8680:8681 Equiv <> c1 var
R8647:8650 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8652:8657 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8660:8665 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8668:8670 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8651:8651 Equiv <> b var
R8658:8659 Equiv <> c1 var
R8666:8667 Equiv <> c2 var
R8608:8613 Equiv <> bequiv def
R8617:8621 Imp <> BTrue constr
R8615:8615 Equiv <> b var
R8880:8885 Equiv <> bequiv def
R8974:8981 Imp <> E_IfTrue constr
R8974:8981 Imp <> E_IfTrue constr
R9011:9016 Equiv <> bequiv def
prf 9138:9146 <> IFB_false
R9189:9194 Equiv <> cequiv def
R9231:9232 Equiv <> c2 var
R9201:9204 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9206:9211 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9214:9219 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9222:9224 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9205:9205 Equiv <> b var
R9212:9213 Equiv <> c1 var
R9220:9221 Equiv <> c2 var
R9167:9172 Equiv <> bequiv def
R9176:9181 Imp <> BFalse constr
R9174:9174 Equiv <> b var
R9349:9354 Equiv <> bequiv def
R9432:9440 Imp <> E_IfFalse constr
R9432:9440 Imp <> E_IfFalse constr
R9461:9466 Equiv <> bequiv def
prf 9661:9676 <> swap_if_branches
R9697:9702 Equiv <> cequiv def
R9740:9743 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9750:9755 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9758:9763 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9766:9768 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9744:9747 Imp <> BNot constr
R9749:9749 Equiv <> b var
R9756:9757 Equiv <> e2 var
R9764:9765 Equiv <> e1 var
R9709:9712 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9714:9719 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9722:9727 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9730:9732 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9713:9713 Equiv <> b var
R9720:9721 Equiv <> e1 var
R9728:9729 Equiv <> e2 var
R9879:9887 Imp <> E_IfFalse constr
R9879:9887 Imp <> E_IfFalse constr
R9962:9969 Imp <> E_IfTrue constr
R9962:9969 Imp <> E_IfTrue constr
R10065:10073 Imp <> E_IfFalse constr
R10065:10073 Imp <> E_IfFalse constr
R10113:10117 Imp <> beval def
R10113:10117 Imp <> beval def
R10180:10187 Imp <> E_IfTrue constr
R10180:10187 Imp <> E_IfTrue constr
R10227:10231 Imp <> beval def
R10227:10231 Imp <> beval def
prf 10634:10644 <> WHILE_false
R10689:10694 Equiv <> cequiv def
R10729:10732 Imp <> ::'SKIP' not
R10704:10709 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10711:10714 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10716:10719 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10710:10710 Equiv <> b var
R10715:10715 Equiv <> c var
R10665:10670 Equiv <> bequiv def
R10674:10679 Imp <> BFalse constr
R10672:10672 Equiv <> b var
R10848:10853 Imp <> E_Skip constr
R10848:10853 Imp <> E_Skip constr
R10965:10974 Imp <> E_WhileEnd constr
R10965:10974 Imp <> E_WhileEnd constr
prf 12302:12319 <> WHILE_true_nonterm
R12370:12372 Coq.Init.Logic <> :type_scope:'~'_x not
R12403:12404 Coq.Init.Logic <> :type_scope:'~'_x not
R12373:12373 Imp <> ::x_'/'_x_'\\'_x not
R12390:12393 Imp <> ::x_'/'_x_'\\'_x not
R12396:12399 Imp <> ::x_'/'_x_'\\'_x not
R12374:12379 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12381:12384 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12386:12389 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12380:12380 Equiv <> b var
R12385:12385 Equiv <> c var
R12394:12395 Equiv <> st var
R12400:12402 Equiv <> st' var
R12347:12352 Equiv <> bequiv def
R12356:12360 Imp <> BTrue constr
R12354:12354 Equiv <> b var
R12486:12491 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12493:12496 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12498:12501 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12486:12491 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12493:12496 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12498:12501 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12793:12798 Equiv <> bequiv def
prf 13328:13337 <> WHILE_true
R13381:13386 Equiv <> cequiv def
R13422:13427 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13433:13436 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13441:13444 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13428:13432 Imp <> BTrue constr
R13437:13440 Imp <> ::'SKIP' not
R13396:13401 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13403:13406 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13408:13411 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13402:13402 Equiv <> b var
R13407:13407 Equiv <> c var
R13357:13362 Equiv <> bequiv def
R13366:13370 Imp <> BTrue constr
R13364:13364 Equiv <> b var
R13543:13560 Equiv <> WHILE_true_nonterm thm
R13543:13560 Equiv <> WHILE_true_nonterm thm
R13603:13605 Coq.Init.Logic <> not def
R13664:13669 Equiv <> bequiv def
R13677:13681 Imp <> BTrue constr
R13671:13675 Imp <> BTrue constr
R13664:13669 Equiv <> bequiv def
R13677:13681 Imp <> BTrue constr
R13671:13675 Imp <> BTrue constr
R13696:13701 Equiv <> bequiv def
R13751:13768 Equiv <> WHILE_true_nonterm thm
R13776:13779 Imp <> ::'SKIP' not
R13770:13774 Imp <> BTrue constr
R13751:13768 Equiv <> WHILE_true_nonterm thm
R13776:13779 Imp <> ::'SKIP' not
R13770:13774 Imp <> BTrue constr
R13818:13820 Coq.Init.Logic <> not def
prf 13905:13918 <> loop_unrolling
R13935:13940 Equiv <> cequiv def
R13970:13973 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13975:13981 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R14002:14008 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R14013:14015 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13974:13974 Equiv <> b var
R13983:13985 Imp <> ::x_';;'_x not
R13982:13982 Equiv <> c var
R13986:13991 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13993:13996 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13998:14001 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13992:13992 Equiv <> b var
R13997:13997 Equiv <> c var
R14009:14012 Imp <> ::'SKIP' not
R13947:13952 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13954:13957 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13959:13962 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13953:13953 Equiv <> b var
R13958:13958 Equiv <> c var
R14172:14180 Imp <> E_IfFalse constr
R14172:14180 Imp <> E_IfFalse constr
R14201:14206 Imp <> E_Skip constr
R14201:14206 Imp <> E_Skip constr
R14243:14250 Imp <> E_IfTrue constr
R14243:14250 Imp <> E_IfTrue constr
R14277:14281 Imp <> E_Seq constr
R14277:14281 Imp <> E_Seq constr
R14427:14437 Imp <> E_WhileLoop constr
R14427:14437 Imp <> E_WhileLoop constr
R14563:14572 Imp <> E_WhileEnd constr
R14563:14572 Imp <> E_WhileEnd constr
prf 14655:14663 <> seq_assoc
R14686:14691 Equiv <> cequiv def
R14711:14713 Imp <> ::x_';;'_x not
R14720:14720 Imp <> ::x_';;'_x not
R14709:14710 Equiv <> c1 var
R14716:14717 Imp <> ::x_';;'_x not
R14714:14715 Equiv <> c2 var
R14718:14719 Equiv <> c3 var
R14694:14694 Imp <> ::x_';;'_x not
R14701:14703 Imp <> ::x_';;'_x not
R14697:14698 Imp <> ::x_';;'_x not
R14695:14696 Equiv <> c1 var
R14699:14700 Equiv <> c2 var
R14704:14705 Equiv <> c3 var
R14848:14852 Imp <> E_Seq constr
R14848:14852 Imp <> E_Seq constr
R14890:14894 Imp <> E_Seq constr
R14890:14894 Imp <> E_Seq constr
R14976:14980 Imp <> E_Seq constr
R14976:14980 Imp <> E_Seq constr
R14992:14996 Imp <> E_Seq constr
R14992:14996 Imp <> E_Seq constr
prf 15276:15294 <> identity_assignment
R15308:15309 Maps <> id ind
R15315:15320 Equiv <> cequiv def
R15344:15347 Imp <> ::'SKIP' not
R15328:15332 Imp <> ::x_'::='_x not
R15327:15327 Equiv <> X var
R15333:15335 Imp <> AId constr
R15337:15337 Equiv <> X var
R15450:15457 Maps <> t_update def
R15450:15457 Maps <> t_update def
R15514:15538 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R15514:15538 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R15563:15575 Maps <> t_update_same thm
R15563:15575 Maps <> t_update_same thm
R15652:15655 Coq.Init.Logic <> :type_scope:x_'='_x not
R15678:15678 Coq.Init.Logic <> :type_scope:x_'='_x not
R15656:15663 Maps <> t_update def
R15652:15655 Coq.Init.Logic <> :type_scope:x_'='_x not
R15678:15678 Coq.Init.Logic <> :type_scope:x_'='_x not
R15656:15663 Maps <> t_update def
R15698:15722 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R15698:15722 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R15750:15762 Maps <> t_update_same thm
R15750:15762 Maps <> t_update_same thm
prf 15909:15921 <> assign_aequiv
R15961:15966 Equiv <> cequiv def
R15975:15979 Imp <> ::x_'::='_x not
R15974:15974 Equiv <> X var
R15980:15980 Equiv <> e var
R15968:15971 Imp <> ::'SKIP' not
R15939:15944 Equiv <> aequiv def
R15954:15954 Equiv <> e var
R15947:15949 Imp <> AId constr
R15951:15951 Equiv <> X var
R16098:16103 Equiv <> aequiv def
R16170:16172 Coq.Init.Logic <> :type_scope:x_'='_x not
R16173:16180 Maps <> t_update def
R16170:16172 Coq.Init.Logic <> :type_scope:x_'='_x not
R16173:16180 Maps <> t_update def
R16208:16232 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R16208:16232 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R16255:16267 Maps <> t_update_same thm
R16255:16267 Maps <> t_update_same thm
R16377:16382 Equiv <> aequiv def
R16505:16512 Maps <> t_update def
R16505:16512 Maps <> t_update def
R16573:16585 Maps <> t_update_same thm
R16573:16585 Maps <> t_update_same thm
prf 17147:17157 <> refl_aequiv
R17173:17176 Imp <> aexp ind
R17180:17185 Equiv <> aequiv def
R17189:17189 Equiv <> a var
R17187:17187 Equiv <> a var
prf 17240:17249 <> sym_aequiv
R17269:17272 Imp <> aexp ind
R17294:17299 Equiv <> aequiv def
R17304:17305 Equiv <> a1 var
R17301:17302 Equiv <> a2 var
R17278:17283 Equiv <> aequiv def
R17288:17289 Equiv <> a2 var
R17285:17286 Equiv <> a1 var
prf 17376:17387 <> trans_aequiv
R17410:17413 Imp <> aexp ind
R17451:17456 Equiv <> aequiv def
R17461:17462 Equiv <> a3 var
R17458:17459 Equiv <> a1 var
R17435:17440 Equiv <> aequiv def
R17445:17446 Equiv <> a3 var
R17442:17443 Equiv <> a2 var
R17419:17424 Equiv <> aequiv def
R17429:17430 Equiv <> a2 var
R17426:17427 Equiv <> a1 var
R17481:17486 Equiv <> aequiv def
prf 17583:17593 <> refl_bequiv
R17609:17612 Imp <> bexp ind
R17616:17621 Equiv <> bequiv def
R17625:17625 Equiv <> b var
R17623:17623 Equiv <> b var
R17644:17649 Equiv <> bequiv def
prf 17691:17700 <> sym_bequiv
R17720:17723 Imp <> bexp ind
R17745:17750 Equiv <> bequiv def
R17755:17756 Equiv <> b1 var
R17752:17753 Equiv <> b2 var
R17729:17734 Equiv <> bequiv def
R17739:17740 Equiv <> b2 var
R17736:17737 Equiv <> b1 var
R17775:17780 Equiv <> bequiv def
prf 17842:17853 <> trans_bequiv
R17876:17879 Imp <> bexp ind
R17917:17922 Equiv <> bequiv def
R17927:17928 Equiv <> b3 var
R17924:17925 Equiv <> b1 var
R17901:17906 Equiv <> bequiv def
R17911:17912 Equiv <> b3 var
R17908:17909 Equiv <> b2 var
R17885:17890 Equiv <> bequiv def
R17895:17896 Equiv <> b2 var
R17892:17893 Equiv <> b1 var
R17947:17952 Equiv <> bequiv def
prf 18049:18059 <> refl_cequiv
R18075:18077 Imp <> com ind
R18081:18086 Equiv <> cequiv def
R18090:18090 Equiv <> c var
R18088:18088 Equiv <> c var
R18109:18114 Equiv <> cequiv def
R18140:18147 Coq.Init.Logic <> iff_refl thm
R18140:18147 Coq.Init.Logic <> iff_refl thm
prf 18163:18172 <> sym_cequiv
R18192:18194 Imp <> com ind
R18216:18221 Equiv <> cequiv def
R18226:18227 Equiv <> c1 var
R18223:18224 Equiv <> c2 var
R18200:18205 Equiv <> cequiv def
R18210:18211 Equiv <> c2 var
R18207:18208 Equiv <> c1 var
R18246:18251 Equiv <> cequiv def
R18301:18305 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18289:18291 Imp <> ::x_'/'_x_'\\'_x not
R18294:18297 Imp <> ::x_'/'_x_'\\'_x not
R18308:18310 Imp <> ::x_'/'_x_'\\'_x not
R18313:18316 Imp <> ::x_'/'_x_'\\'_x not
R18301:18305 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18289:18291 Imp <> ::x_'/'_x_'\\'_x not
R18294:18297 Imp <> ::x_'/'_x_'\\'_x not
R18308:18310 Imp <> ::x_'/'_x_'\\'_x not
R18313:18316 Imp <> ::x_'/'_x_'\\'_x not
R18377:18383 Coq.Init.Logic <> iff_sym thm
R18377:18383 Coq.Init.Logic <> iff_sym thm
prf 18410:18418 <> iff_trans
R18483:18487 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18481:18482 Equiv <> P1 var
R18488:18489 Equiv <> P3 var
R18468:18472 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18466:18467 Equiv <> P2 var
R18473:18474 Equiv <> P3 var
R18453:18457 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18451:18452 Equiv <> P1 var
R18458:18459 Equiv <> P2 var
prf 18656:18667 <> trans_cequiv
R18690:18692 Imp <> com ind
R18730:18735 Equiv <> cequiv def
R18740:18741 Equiv <> c3 var
R18737:18738 Equiv <> c1 var
R18714:18719 Equiv <> cequiv def
R18724:18725 Equiv <> c3 var
R18721:18722 Equiv <> c2 var
R18698:18703 Equiv <> cequiv def
R18708:18709 Equiv <> c2 var
R18705:18706 Equiv <> c1 var
R18760:18765 Equiv <> cequiv def
R18826:18828 Imp <> ::x_'/'_x_'\\'_x not
R18831:18834 Imp <> ::x_'/'_x_'\\'_x not
R18808:18816 Equiv <> iff_trans thm
R18826:18828 Imp <> ::x_'/'_x_'\\'_x not
R18831:18834 Imp <> ::x_'/'_x_'\\'_x not
R18808:18816 Equiv <> iff_trans thm
prf 20217:20231 <> CAss_congruence
R20273:20278 Equiv <> cequiv def
R20293:20296 Imp <> CAss constr
R20300:20302 Equiv <> a1' var
R20298:20298 Equiv <> i var
R20281:20284 Imp <> CAss constr
R20288:20289 Equiv <> a1 var
R20286:20286 Equiv <> i var
R20254:20259 Equiv <> aequiv def
R20264:20266 Equiv <> a1' var
R20261:20262 Equiv <> a1 var
R20415:20419 Imp <> E_Ass constr
R20415:20419 Imp <> E_Ass constr
R20501:20505 Imp <> E_Ass constr
R20501:20505 Imp <> E_Ass constr
prf 22357:22373 <> CWhile_congruence
R22437:22442 Equiv <> cequiv def
R22466:22471 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22475:22478 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22482:22485 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22472:22474 Equiv <> b1' var
R22479:22481 Equiv <> c1' var
R22445:22450 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22453:22456 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22459:22462 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22451:22452 Equiv <> b1 var
R22457:22458 Equiv <> c1 var
R22418:22423 Equiv <> cequiv def
R22428:22430 Equiv <> c1' var
R22425:22426 Equiv <> c1 var
R22401:22406 Equiv <> bequiv def
R22411:22413 Equiv <> b1' var
R22408:22409 Equiv <> b1 var
R22529:22534 Equiv <> bequiv def
R22536:22541 Equiv <> cequiv def
R22633:22638 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22641:22644 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22647:22650 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22633:22638 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22641:22644 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22647:22650 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22766:22775 Imp <> E_WhileEnd constr
R22766:22775 Imp <> E_WhileEnd constr
R22840:22850 Imp <> E_WhileLoop constr
R22840:22850 Imp <> E_WhileLoop constr
R23099:23104 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23108:23111 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23115:23118 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23099:23104 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23108:23111 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23115:23118 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23237:23246 Imp <> E_WhileEnd constr
R23237:23246 Imp <> E_WhileEnd constr
R23311:23321 Imp <> E_WhileLoop constr
R23311:23321 Imp <> E_WhileLoop constr
prf 23617:23631 <> CSeq_congruence
R23695:23700 Equiv <> cequiv def
R23715:23716 Imp <> ::x_';;'_x not
R23712:23714 Equiv <> c1' var
R23717:23719 Equiv <> c2' var
R23705:23706 Imp <> ::x_';;'_x not
R23703:23704 Equiv <> c1 var
R23707:23708 Equiv <> c2 var
R23676:23681 Equiv <> cequiv def
R23686:23688 Equiv <> c2' var
R23683:23684 Equiv <> c2 var
R23659:23664 Equiv <> cequiv def
R23669:23671 Equiv <> c1' var
R23666:23667 Equiv <> c1 var
R23819:23824 Equiv <> cequiv def
R23865:23869 Imp <> E_Seq constr
R23865:23869 Imp <> E_Seq constr
R23939:23944 Equiv <> cequiv def
R23985:23989 Imp <> E_Seq constr
R23985:23989 Imp <> E_Seq constr
prf 24120:24133 <> CIf_congruence
R24217:24222 Equiv <> cequiv def
R24261:24264 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24267:24272 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24276:24281 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24285:24287 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24265:24266 Equiv <> b' var
R24273:24275 Equiv <> c1' var
R24282:24284 Equiv <> c2' var
R24225:24228 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24230:24235 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24238:24243 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24246:24248 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24229:24229 Equiv <> b var
R24236:24237 Equiv <> c1 var
R24244:24245 Equiv <> c2 var
R24198:24203 Equiv <> cequiv def
R24208:24210 Equiv <> c2' var
R24205:24206 Equiv <> c2 var
R24181:24186 Equiv <> cequiv def
R24191:24193 Equiv <> c1' var
R24188:24189 Equiv <> c1 var
R24166:24171 Equiv <> bequiv def
R24175:24176 Equiv <> b' var
R24173:24173 Equiv <> b var
R24343:24348 Equiv <> cequiv def
R24379:24384 Equiv <> bequiv def
R24487:24494 Imp <> E_IfTrue constr
R24487:24494 Imp <> E_IfTrue constr
R24563:24571 Imp <> E_IfFalse constr
R24563:24571 Imp <> E_IfFalse constr
R24749:24756 Imp <> E_IfTrue constr
R24749:24756 Imp <> E_IfTrue constr
R24825:24833 Imp <> E_IfFalse constr
R24825:24833 Imp <> E_IfFalse constr
def 25076:25093 <> congruence_example
R25098:25103 Equiv <> cequiv def
R25286:25293 Imp <> ::x_';;'_x not
R25275:25279 Imp <> ::x_'::='_x not
R25274:25274 Imp <> X def
R25280:25283 Imp <> ANum constr
R25294:25298 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25319:25337 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25366:25409 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25423:25430 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25299:25301 Imp <> BEq constr
R25312:25315 Imp <> ANum constr
R25304:25306 Imp <> AId constr
R25308:25308 Imp <> X def
R25339:25343 Imp <> ::x_'::='_x not
R25338:25338 Imp <> Y def
R25344:25349 Imp <> AMinus constr
R25360:25362 Imp <> AId constr
R25364:25364 Imp <> X def
R25352:25354 Imp <> AId constr
R25356:25356 Imp <> X def
R25411:25415 Imp <> ::x_'::='_x not
R25410:25410 Imp <> Y def
R25416:25419 Imp <> ANum constr
R25143:25150 Imp <> ::x_';;'_x not
R25132:25136 Imp <> ::x_'::='_x not
R25131:25131 Imp <> X def
R25137:25140 Imp <> ANum constr
R25151:25155 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25176:25194 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25207:25224 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25238:25245 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25156:25158 Imp <> BEq constr
R25169:25172 Imp <> ANum constr
R25161:25163 Imp <> AId constr
R25165:25165 Imp <> X def
R25196:25200 Imp <> ::x_'::='_x not
R25195:25195 Imp <> Y def
R25201:25204 Imp <> ANum constr
R25226:25230 Imp <> ::x_'::='_x not
R25225:25225 Imp <> Y def
R25231:25234 Imp <> ANum constr
R25449:25463 Equiv <> CSeq_congruence thm
R25449:25463 Equiv <> CSeq_congruence thm
R25476:25486 Equiv <> refl_cequiv thm
R25476:25486 Equiv <> refl_cequiv thm
R25499:25512 Equiv <> CIf_congruence thm
R25499:25512 Equiv <> CIf_congruence thm
R25527:25537 Equiv <> refl_bequiv thm
R25527:25537 Equiv <> refl_bequiv thm
R25552:25566 Equiv <> CAss_congruence thm
R25552:25566 Equiv <> CAss_congruence thm
R25576:25581 Equiv <> aequiv def
R25615:25624 Coq.Arith.Minus <> minus_diag thm
R25615:25624 Coq.Arith.Minus <> minus_diag thm
R25639:25649 Equiv <> refl_cequiv thm
R25639:25649 Equiv <> refl_cequiv thm
def 26110:26121 <> atrans_sound
R26141:26144 Imp <> aexp ind
R26133:26136 Imp <> aexp ind
R26171:26174 Imp <> aexp ind
R26182:26187 Equiv <> aequiv def
R26192:26197 Equiv <> atrans var
R26199:26199 Equiv <> a var
R26189:26189 Equiv <> a var
def 26215:26226 <> btrans_sound
R26246:26249 Imp <> bexp ind
R26238:26241 Imp <> bexp ind
R26276:26279 Imp <> bexp ind
R26287:26292 Equiv <> bequiv def
R26297:26302 Equiv <> btrans var
R26304:26304 Equiv <> b var
R26294:26294 Equiv <> b var
def 26320:26331 <> ctrans_sound
R26350:26352 Imp <> com ind
R26343:26345 Imp <> com ind
R26379:26381 Imp <> com ind
R26389:26394 Equiv <> cequiv def
R26399:26404 Equiv <> ctrans var
R26406:26406 Equiv <> c var
R26396:26396 Equiv <> c var
def 26723:26741 <> fold_constants_aexp
R26748:26751 Imp <> aexp ind
R26756:26759 Imp <> aexp ind
R26772:26772 Equiv <> a var
R26783:26786 Imp <> ANum constr
R26799:26802 Imp <> ANum constr
R26810:26812 Imp <> AId constr
R26826:26828 Imp <> AId constr
R26836:26840 Imp <> APlus constr
R26862:26862 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26885:26886 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26909:26909 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26863:26881 Equiv <> fold_constants_aexp def
R26887:26905 Equiv <> fold_constants_aexp def
R26926:26926 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26934:26935 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26943:26943 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26927:26930 Imp <> ANum constr
R26936:26939 Imp <> ANum constr
R26948:26951 Imp <> ANum constr
R26956:26958 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R26969:26969 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26973:26974 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26978:26978 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26983:26987 Imp <> APlus constr
R27009:27014 Imp <> AMinus constr
R27035:27035 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27058:27059 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27082:27082 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27036:27054 Equiv <> fold_constants_aexp def
R27060:27078 Equiv <> fold_constants_aexp def
R27099:27099 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27107:27108 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27116:27116 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27100:27103 Imp <> ANum constr
R27109:27112 Imp <> ANum constr
R27121:27124 Imp <> ANum constr
R27129:27131 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R27142:27142 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27146:27147 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27151:27151 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27156:27161 Imp <> AMinus constr
R27183:27187 Imp <> AMult constr
R27209:27209 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27232:27233 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27256:27256 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27210:27228 Equiv <> fold_constants_aexp def
R27234:27252 Equiv <> fold_constants_aexp def
R27273:27273 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27281:27282 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27290:27290 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27274:27277 Imp <> ANum constr
R27283:27286 Imp <> ANum constr
R27295:27298 Imp <> ANum constr
R27303:27305 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R27316:27316 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27320:27321 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27325:27325 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27330:27334 Imp <> AMult constr
def 27368:27380 <> fold_aexp_ex1
R27455:27459 Coq.Init.Logic <> :type_scope:x_'='_x not
R27388:27406 Equiv <> fold_constants_aexp def
R27415:27419 Imp <> AMult constr
R27448:27450 Imp <> AId constr
R27452:27452 Imp <> X def
R27422:27426 Imp <> APlus constr
R27438:27441 Imp <> ANum constr
R27429:27432 Imp <> ANum constr
R27460:27464 Imp <> AMult constr
R27476:27478 Imp <> AId constr
R27480:27480 Imp <> X def
R27467:27470 Imp <> ANum constr
def 27823:27835 <> fold_aexp_ex2
R27956:27960 Coq.Init.Logic <> :type_scope:x_'='_x not
R27843:27861 Equiv <> fold_constants_aexp def
R27870:27875 Imp <> AMinus constr
R27886:27890 Imp <> APlus constr
R27948:27950 Imp <> AId constr
R27952:27952 Imp <> Y def
R27893:27897 Imp <> AMult constr
R27909:27912 Imp <> ANum constr
R27900:27903 Imp <> ANum constr
R27878:27880 Imp <> AId constr
R27882:27882 Imp <> X def
R27961:27966 Imp <> AMinus constr
R27977:27981 Imp <> APlus constr
R27993:27995 Imp <> AId constr
R27997:27997 Imp <> Y def
R27984:27987 Imp <> ANum constr
R27969:27971 Imp <> AId constr
R27973:27973 Imp <> X def
def 28213:28231 <> fold_constants_bexp
R28238:28241 Imp <> bexp ind
R28246:28249 Imp <> bexp ind
R28262:28262 Equiv <> b var
R28273:28277 Imp <> BTrue constr
R28289:28293 Imp <> BTrue constr
R28299:28304 Imp <> BFalse constr
R28315:28320 Imp <> BFalse constr
R28326:28328 Imp <> BEq constr
R28350:28350 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28373:28374 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28397:28397 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28351:28369 Equiv <> fold_constants_aexp def
R28375:28393 Equiv <> fold_constants_aexp def
R28414:28414 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28422:28423 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28431:28431 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28415:28418 Imp <> ANum constr
R28424:28427 Imp <> ANum constr
R28447:28453 Coq.Arith.EqNat <> beq_nat def
R28477:28482 Imp <> BFalse constr
R28466:28470 Imp <> BTrue constr
R28490:28490 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28494:28495 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28499:28499 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28512:28514 Imp <> BEq constr
R28536:28538 Imp <> BLe constr
R28560:28560 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28583:28584 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28607:28607 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28561:28579 Equiv <> fold_constants_aexp def
R28585:28603 Equiv <> fold_constants_aexp def
R28624:28624 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28632:28633 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28641:28641 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28625:28628 Imp <> ANum constr
R28634:28637 Imp <> ANum constr
R28657:28659 Coq.Arith.Compare_dec <> leb def
R28683:28688 Imp <> BFalse constr
R28672:28676 Imp <> BTrue constr
R28696:28696 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28700:28701 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28705:28705 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28718:28720 Imp <> BLe constr
R28742:28745 Imp <> BNot constr
R28765:28783 Equiv <> fold_constants_bexp def
R28800:28804 Imp <> BTrue constr
R28809:28814 Imp <> BFalse constr
R28822:28827 Imp <> BFalse constr
R28832:28836 Imp <> BTrue constr
R28851:28854 Imp <> BNot constr
R28872:28875 Imp <> BAnd constr
R28897:28897 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28920:28921 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28944:28944 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28898:28916 Equiv <> fold_constants_bexp def
R28922:28940 Equiv <> fold_constants_bexp def
R28961:28961 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28967:28968 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28974:28974 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28962:28966 Imp <> BTrue constr
R28969:28973 Imp <> BTrue constr
R28979:28983 Imp <> BTrue constr
R28991:28991 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28997:28998 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29005:29005 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28992:28996 Imp <> BTrue constr
R28999:29004 Imp <> BFalse constr
R29010:29015 Imp <> BFalse constr
R29023:29023 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29030:29031 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29037:29037 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29024:29029 Imp <> BFalse constr
R29032:29036 Imp <> BTrue constr
R29042:29047 Imp <> BFalse constr
R29055:29055 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29062:29063 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29070:29070 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29056:29061 Imp <> BFalse constr
R29064:29069 Imp <> BFalse constr
R29075:29080 Imp <> BFalse constr
R29088:29088 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29092:29093 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29097:29097 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29102:29105 Imp <> BAnd constr
def 29139:29151 <> fold_bexp_ex1
R29218:29222 Coq.Init.Logic <> :type_scope:x_'='_x not
R29159:29177 Equiv <> fold_constants_bexp def
R29180:29183 Imp <> BAnd constr
R29192:29195 Imp <> BNot constr
R29198:29201 Imp <> BAnd constr
R29210:29214 Imp <> BTrue constr
R29203:29208 Imp <> BFalse constr
R29185:29189 Imp <> BTrue constr
R29223:29227 Imp <> BTrue constr
def 29264:29276 <> fold_bexp_ex2
R29467:29471 Coq.Init.Logic <> :type_scope:x_'='_x not
R29284:29302 Equiv <> fold_constants_bexp def
R29311:29314 Imp <> BAnd constr
R29351:29353 Imp <> BEq constr
R29382:29387 Imp <> AMinus constr
R29399:29403 Imp <> APlus constr
R29456:29459 Imp <> ANum constr
R29406:29409 Imp <> ANum constr
R29390:29393 Imp <> ANum constr
R29356:29359 Imp <> ANum constr
R29317:29319 Imp <> BEq constr
R29330:29332 Imp <> AId constr
R29334:29334 Imp <> Y def
R29322:29324 Imp <> AId constr
R29326:29326 Imp <> X def
R29472:29475 Imp <> BAnd constr
R29499:29503 Imp <> BTrue constr
R29478:29480 Imp <> BEq constr
R29491:29493 Imp <> AId constr
R29495:29495 Imp <> Y def
R29483:29485 Imp <> AId constr
R29487:29487 Imp <> X def
def 29657:29674 <> fold_constants_com
R29681:29683 Imp <> com ind
R29688:29690 Imp <> com ind
R29703:29703 Equiv <> c var
R29714:29717 Imp <> ::'SKIP' not
R29733:29736 Imp <> ::'SKIP' not
R29743:29747 Imp <> ::x_'::='_x not
R29760:29763 Imp <> CAss constr
R29768:29786 Equiv <> fold_constants_aexp def
R29797:29800 Imp <> ::x_';;'_x not
R29814:29814 Imp <> ::x_';;'_x not
R29836:29841 Imp <> ::x_';;'_x not
R29863:29863 Imp <> ::x_';;'_x not
R29815:29832 Equiv <> fold_constants_com def
R29842:29859 Equiv <> fold_constants_com def
R29869:29872 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29874:29879 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29882:29887 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29890:29892 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29909:29927 Equiv <> fold_constants_bexp def
R29944:29948 Imp <> BTrue constr
R29953:29970 Equiv <> fold_constants_com def
R29983:29988 Imp <> BFalse constr
R29993:30010 Equiv <> fold_constants_com def
R30029:30032 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30035:30040 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30062:30088 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30110:30112 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30041:30058 Equiv <> fold_constants_com def
R30089:30106 Equiv <> fold_constants_com def
R30128:30133 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30135:30138 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30140:30143 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30160:30178 Equiv <> fold_constants_bexp def
R30195:30199 Imp <> BTrue constr
R30204:30209 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30215:30218 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30223:30226 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30210:30214 Imp <> BTrue constr
R30219:30222 Imp <> ::'SKIP' not
R30236:30241 Imp <> BFalse constr
R30246:30249 Imp <> ::'SKIP' not
R30265:30270 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30273:30277 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30298:30302 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30278:30295 Equiv <> fold_constants_com def
R30297:30297 Equiv <> c var
def 30330:30341 <> fold_com_ex1
R30824:30863 Coq.Init.Logic <> :type_scope:x_'='_x not
R31121:31121 Coq.Init.Logic <> :type_scope:x_'='_x not
R30347:30364 Equiv <> fold_constants_com def
R30428:30435 Imp <> ::x_';;'_x not
R30400:30404 Imp <> ::x_'::='_x not
R30399:30399 Imp <> X def
R30405:30409 Imp <> APlus constr
R30421:30424 Imp <> ANum constr
R30412:30415 Imp <> ANum constr
R30465:30472 Imp <> ::x_';;'_x not
R30437:30441 Imp <> ::x_'::='_x not
R30436:30436 Imp <> Y def
R30442:30447 Imp <> AMinus constr
R30458:30461 Imp <> ANum constr
R30450:30452 Imp <> AId constr
R30454:30454 Imp <> X def
R30599:30606 Imp <> ::x_';;'_x not
R30473:30476 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30544:30556 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30561:30578 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30591:30598 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30477:30479 Imp <> BEq constr
R30520:30524 Imp <> APlus constr
R30536:30539 Imp <> ANum constr
R30527:30530 Imp <> ANum constr
R30482:30487 Imp <> AMinus constr
R30498:30500 Imp <> AId constr
R30502:30502 Imp <> Y def
R30490:30492 Imp <> AId constr
R30494:30494 Imp <> X def
R30557:30560 Imp <> ::'SKIP' not
R30580:30584 Imp <> ::x_'::='_x not
R30579:30579 Imp <> Y def
R30585:30588 Imp <> ANum constr
R30741:30748 Imp <> ::x_';;'_x not
R30607:30610 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30680:30698 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30711:30728 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30733:30740 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30611:30613 Imp <> BLe constr
R30638:30643 Imp <> AMinus constr
R30655:30659 Imp <> APlus constr
R30671:30674 Imp <> ANum constr
R30662:30665 Imp <> ANum constr
R30646:30649 Imp <> ANum constr
R30616:30619 Imp <> ANum constr
R30700:30704 Imp <> ::x_'::='_x not
R30699:30699 Imp <> Y def
R30705:30708 Imp <> ANum constr
R30729:30732 Imp <> ::'SKIP' not
R30749:30754 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30775:30785 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30814:30822 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30755:30757 Imp <> BEq constr
R30768:30771 Imp <> ANum constr
R30760:30762 Imp <> AId constr
R30764:30764 Imp <> Y def
R30787:30791 Imp <> ::x_'::='_x not
R30786:30786 Imp <> X def
R30792:30796 Imp <> APlus constr
R30807:30810 Imp <> ANum constr
R30799:30801 Imp <> AId constr
R30803:30803 Imp <> X def
R30876:30883 Imp <> ::x_';;'_x not
R30865:30869 Imp <> ::x_'::='_x not
R30864:30864 Imp <> X def
R30870:30873 Imp <> ANum constr
R30913:30920 Imp <> ::x_';;'_x not
R30885:30889 Imp <> ::x_'::='_x not
R30884:30884 Imp <> Y def
R30890:30895 Imp <> AMinus constr
R30906:30909 Imp <> ANum constr
R30898:30900 Imp <> AId constr
R30902:30902 Imp <> X def
R31019:31026 Imp <> ::x_';;'_x not
R30921:30924 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30962:30974 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30979:30997 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31010:31018 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30925:30927 Imp <> BEq constr
R30955:30958 Imp <> ANum constr
R30930:30935 Imp <> AMinus constr
R30946:30948 Imp <> AId constr
R30950:30950 Imp <> Y def
R30938:30940 Imp <> AId constr
R30942:30942 Imp <> X def
R30975:30978 Imp <> ::'SKIP' not
R30999:31003 Imp <> ::x_'::='_x not
R30998:30998 Imp <> Y def
R31004:31007 Imp <> ANum constr
R31039:31046 Imp <> ::x_';;'_x not
R31028:31032 Imp <> ::x_'::='_x not
R31027:31027 Imp <> Y def
R31033:31036 Imp <> ANum constr
R31047:31052 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31073:31083 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31112:31120 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31053:31055 Imp <> BEq constr
R31066:31069 Imp <> ANum constr
R31058:31060 Imp <> AId constr
R31062:31062 Imp <> Y def
R31085:31089 Imp <> ::x_'::='_x not
R31084:31084 Imp <> X def
R31090:31094 Imp <> APlus constr
R31105:31108 Imp <> ANum constr
R31097:31099 Imp <> AId constr
R31101:31101 Imp <> X def
prf 31371:31395 <> fold_constants_aexp_sound
R31401:31412 Equiv <> atrans_sound def
R31414:31432 Equiv <> fold_constants_aexp def
R31451:31462 Equiv <> atrans_sound def
R31482:31487 Equiv <> aequiv def
R31896:31914 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31896:31914 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31896:31914 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31896:31914 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
R31940:31958 Equiv <> fold_constants_aexp def
prf 34880:34904 <> fold_constants_bexp_sound
R34909:34920 Equiv <> btrans_sound def
R34922:34940 Equiv <> fold_constants_bexp def
R34959:34970 Equiv <> btrans_sound def
R34990:34995 Equiv <> bequiv def
R35494:35512 Equiv <> fold_constants_aexp def
R35494:35512 Equiv <> fold_constants_aexp def
R35551:35569 Equiv <> fold_constants_aexp def
R35551:35569 Equiv <> fold_constants_aexp def
R35607:35611 Imp <> aeval def
R35626:35630 Imp <> aeval def
R35673:35697 Equiv <> fold_constants_aexp_sound thm
R35626:35630 Imp <> aeval def
R35607:35611 Imp <> aeval def
R35673:35697 Equiv <> fold_constants_aexp_sound thm
R35727:35731 Imp <> aeval def
R35746:35750 Imp <> aeval def
R35793:35817 Equiv <> fold_constants_aexp_sound thm
R35746:35750 Imp <> aeval def
R35727:35731 Imp <> aeval def
R35793:35817 Equiv <> fold_constants_aexp_sound thm
R36011:36017 Coq.Arith.EqNat <> beq_nat def
R36011:36017 Coq.Arith.EqNat <> beq_nat def
R36115:36133 Equiv <> fold_constants_aexp def
R36115:36133 Equiv <> fold_constants_aexp def
R36172:36190 Equiv <> fold_constants_aexp def
R36172:36190 Equiv <> fold_constants_aexp def
R36228:36232 Imp <> aeval def
R36247:36251 Imp <> aeval def
R36290:36314 Equiv <> fold_constants_aexp_sound thm
R36247:36251 Imp <> aeval def
R36228:36232 Imp <> aeval def
R36290:36314 Equiv <> fold_constants_aexp_sound thm
R36343:36347 Imp <> aeval def
R36362:36366 Imp <> aeval def
R36362:36366 Imp <> aeval def
R36343:36347 Imp <> aeval def
R36455:36457 Coq.Arith.Compare_dec <> leb def
R36455:36457 Coq.Arith.Compare_dec <> leb def
R36516:36540 Equiv <> fold_constants_aexp_sound thm
R36516:36540 Equiv <> fold_constants_aexp_sound thm
R36615:36633 Equiv <> fold_constants_bexp def
R36615:36633 Equiv <> fold_constants_bexp def
R36742:36760 Equiv <> fold_constants_bexp def
R36742:36760 Equiv <> fold_constants_bexp def
R36799:36817 Equiv <> fold_constants_bexp def
R36799:36817 Equiv <> fold_constants_bexp def
prf 37078:37101 <> fold_constants_com_sound
R37107:37118 Equiv <> ctrans_sound def
R37120:37137 Equiv <> fold_constants_com def
R37156:37167 Equiv <> ctrans_sound def
R37223:37233 Equiv <> refl_cequiv thm
R37223:37233 Equiv <> refl_cequiv thm
R37256:37270 Equiv <> CAss_congruence thm
R37256:37270 Equiv <> CAss_congruence thm
R37293:37317 Equiv <> fold_constants_aexp_sound thm
R37293:37317 Equiv <> fold_constants_aexp_sound thm
R37339:37353 Equiv <> CSeq_congruence thm
R37339:37353 Equiv <> CSeq_congruence thm
R37393:37398 Equiv <> bequiv def
R37403:37421 Equiv <> fold_constants_bexp def
R37393:37398 Equiv <> bequiv def
R37403:37421 Equiv <> fold_constants_bexp def
R37442:37466 Equiv <> fold_constants_bexp_sound thm
R37442:37466 Equiv <> fold_constants_bexp_sound thm
R37485:37503 Equiv <> fold_constants_bexp def
R37535:37548 Equiv <> CIf_congruence thm
R37485:37503 Equiv <> fold_constants_bexp def
R37535:37548 Equiv <> CIf_congruence thm
R37535:37548 Equiv <> CIf_congruence thm
R37535:37548 Equiv <> CIf_congruence thm
R37535:37548 Equiv <> CIf_congruence thm
R37535:37548 Equiv <> CIf_congruence thm
R37535:37548 Equiv <> CIf_congruence thm
R37763:37774 Equiv <> trans_cequiv thm
R37763:37774 Equiv <> trans_cequiv thm
R37813:37820 Equiv <> IFB_true thm
R37813:37820 Equiv <> IFB_true thm
R37874:37885 Equiv <> trans_cequiv thm
R37874:37885 Equiv <> trans_cequiv thm
R37924:37932 Equiv <> IFB_false thm
R37924:37932 Equiv <> IFB_false thm
R37980:37985 Equiv <> bequiv def
R37990:38008 Equiv <> fold_constants_bexp def
R37980:37985 Equiv <> bequiv def
R37990:38008 Equiv <> fold_constants_bexp def
R38039:38063 Equiv <> fold_constants_bexp_sound thm
R38039:38063 Equiv <> fold_constants_bexp_sound thm
R38092:38110 Equiv <> fold_constants_bexp def
R38144:38160 Equiv <> CWhile_congruence thm
R38092:38110 Equiv <> fold_constants_bexp def
R38144:38160 Equiv <> CWhile_congruence thm
R38144:38160 Equiv <> CWhile_congruence thm
R38144:38160 Equiv <> CWhile_congruence thm
R38144:38160 Equiv <> CWhile_congruence thm
R38144:38160 Equiv <> CWhile_congruence thm
R38144:38160 Equiv <> CWhile_congruence thm
R38224:38229 Equiv <> cequiv def
R38248:38257 Equiv <> WHILE_true thm
R38248:38257 Equiv <> WHILE_true thm
R38307:38317 Equiv <> WHILE_false thm
R38307:38317 Equiv <> WHILE_false thm
def 39871:39889 <> optimize_0plus_aexp
R39894:39897 Imp <> aexp ind
R39902:39905 Imp <> aexp ind
R39922:39922 Equiv <> e var
R39937:39940 Imp <> ANum constr
R39957:39960 Imp <> ANum constr
R39972:39974 Imp <> AId constr
R39982:39984 Imp <> AId constr
R39997:40001 Imp <> APlus constr
R40004:40007 Imp <> ANum constr
R40028:40046 Equiv <> optimize_0plus_aexp def
R40059:40063 Imp <> APlus constr
R40084:40088 Imp <> APlus constr
R40116:40134 Equiv <> optimize_0plus_aexp def
R40091:40109 Equiv <> optimize_0plus_aexp def
R40148:40153 Imp <> AMinus constr
R40174:40179 Imp <> AMinus constr
R40207:40225 Equiv <> optimize_0plus_aexp def
R40182:40200 Equiv <> optimize_0plus_aexp def
R40239:40243 Imp <> AMult constr
R40264:40268 Imp <> AMult constr
R40296:40314 Equiv <> optimize_0plus_aexp def
R40271:40289 Equiv <> optimize_0plus_aexp def
prf 40340:40364 <> optimize_0plus_aexp_sound
R40367:40378 Equiv <> atrans_sound def
R40380:40398 Equiv <> optimize_0plus_aexp def
R40415:40426 Equiv <> atrans_sound def
R40446:40451 Equiv <> aequiv def
R40557:40575 Equiv <> optimize_0plus_aexp def
R40557:40575 Equiv <> optimize_0plus_aexp def
R40598:40616 Equiv <> optimize_0plus_aexp def
R40598:40616 Equiv <> optimize_0plus_aexp def
def 41696:41705 <> subst_aexp
R41712:41713 Maps <> id ind
R41721:41724 Imp <> aexp ind
R41732:41735 Imp <> aexp ind
R41740:41743 Imp <> aexp ind
R41756:41756 Equiv <> a var
R41767:41770 Imp <> ANum constr
R41789:41792 Imp <> ANum constr
R41800:41802 Imp <> AId constr
R41825:41830 Maps <> beq_id def
R41832:41832 Equiv <> i var
R41849:41851 Imp <> AId constr
R41842:41842 Equiv <> u var
R41860:41864 Imp <> APlus constr
R41882:41886 Imp <> APlus constr
R41909:41918 Equiv <> subst_aexp def
R41922:41922 Equiv <> u var
R41920:41920 Equiv <> i var
R41889:41898 Equiv <> subst_aexp def
R41902:41902 Equiv <> u var
R41900:41900 Equiv <> i var
R41932:41937 Imp <> AMinus constr
R41954:41959 Imp <> AMinus constr
R41982:41991 Equiv <> subst_aexp def
R41995:41995 Equiv <> u var
R41993:41993 Equiv <> i var
R41962:41971 Equiv <> subst_aexp def
R41975:41975 Equiv <> u var
R41973:41973 Equiv <> i var
R42005:42009 Imp <> AMult constr
R42027:42031 Imp <> AMult constr
R42054:42063 Equiv <> subst_aexp def
R42067:42067 Equiv <> u var
R42065:42065 Equiv <> i var
R42034:42043 Equiv <> subst_aexp def
R42047:42047 Equiv <> u var
R42045:42045 Equiv <> i var
def 42089:42101 <> subst_aexp_ex
R42184:42188 Coq.Init.Logic <> :type_scope:x_'='_x not
R42230:42230 Coq.Init.Logic <> :type_scope:x_'='_x not
R42107:42116 Equiv <> subst_aexp def
R42162:42166 Imp <> APlus constr
R42177:42179 Imp <> AId constr
R42181:42181 Imp <> X def
R42169:42171 Imp <> AId constr
R42173:42173 Imp <> Y def
R42121:42125 Imp <> APlus constr
R42138:42141 Imp <> ANum constr
R42128:42131 Imp <> ANum constr
R42118:42118 Imp <> X def
R42189:42193 Imp <> APlus constr
R42204:42208 Imp <> APlus constr
R42221:42224 Imp <> ANum constr
R42211:42214 Imp <> ANum constr
R42196:42198 Imp <> AId constr
R42200:42200 Imp <> Y def
def 42426:42445 <> subst_equiv_property
R42472:42477 Equiv <> cequiv def
R42522:42524 Imp <> ::x_';;'_x not
R42515:42519 Imp <> ::x_'::='_x not
R42513:42514 Equiv <> i1 var
R42520:42521 Equiv <> a1 var
R42527:42531 Imp <> ::x_'::='_x not
R42525:42526 Equiv <> i2 var
R42532:42541 Equiv <> subst_aexp def
R42549:42550 Equiv <> a2 var
R42546:42547 Equiv <> a1 var
R42543:42544 Equiv <> i1 var
R42489:42491 Imp <> ::x_';;'_x not
R42482:42486 Imp <> ::x_'::='_x not
R42480:42481 Equiv <> i1 var
R42487:42488 Equiv <> a1 var
R42494:42498 Imp <> ::x_'::='_x not
R42492:42493 Equiv <> i2 var
R42499:42500 Equiv <> a2 var
prf 43787:43799 <> subst_inequiv
R43805:43806 Coq.Init.Logic <> :type_scope:'~'_x not
R43807:43826 Equiv <> subst_equiv_property def
R43845:43864 Equiv <> subst_equiv_property def
R44074:44088 Imp <> ::x_';;'_x not
R44047:44051 Imp <> ::x_'::='_x not
R44046:44046 Imp <> X def
R44052:44056 Imp <> APlus constr
R44067:44070 Imp <> ANum constr
R44059:44061 Imp <> AId constr
R44063:44063 Imp <> X def
R44090:44094 Imp <> ::x_'::='_x not
R44089:44089 Imp <> Y def
R44095:44097 Imp <> AId constr
R44099:44099 Imp <> X def
R44074:44088 Imp <> ::x_';;'_x not
R44047:44051 Imp <> ::x_'::='_x not
R44046:44046 Imp <> X def
R44052:44056 Imp <> APlus constr
R44067:44070 Imp <> ANum constr
R44059:44061 Imp <> AId constr
R44063:44063 Imp <> X def
R44090:44094 Imp <> ::x_'::='_x not
R44089:44089 Imp <> Y def
R44095:44097 Imp <> AId constr
R44099:44099 Imp <> X def
R44155:44169 Imp <> ::x_';;'_x not
R44128:44132 Imp <> ::x_'::='_x not
R44127:44127 Imp <> X def
R44133:44137 Imp <> APlus constr
R44148:44151 Imp <> ANum constr
R44140:44142 Imp <> AId constr
R44144:44144 Imp <> X def
R44171:44175 Imp <> ::x_'::='_x not
R44170:44170 Imp <> Y def
R44176:44180 Imp <> APlus constr
R44191:44194 Imp <> ANum constr
R44183:44185 Imp <> AId constr
R44187:44187 Imp <> X def
R44155:44169 Imp <> ::x_';;'_x not
R44128:44132 Imp <> ::x_'::='_x not
R44127:44127 Imp <> X def
R44133:44137 Imp <> APlus constr
R44148:44151 Imp <> ANum constr
R44140:44142 Imp <> AId constr
R44144:44144 Imp <> X def
R44171:44175 Imp <> ::x_'::='_x not
R44170:44170 Imp <> Y def
R44176:44180 Imp <> APlus constr
R44191:44194 Imp <> ANum constr
R44183:44185 Imp <> AId constr
R44187:44187 Imp <> X def
R44223:44228 Equiv <> cequiv def
R44223:44228 Equiv <> cequiv def
R44445:44452 Maps <> t_update def
R44481:44481 Imp <> Y def
R44455:44462 Maps <> t_update def
R44476:44476 Imp <> X def
R44464:44474 Imp <> empty_state def
R44445:44452 Maps <> t_update def
R44481:44481 Imp <> Y def
R44455:44462 Maps <> t_update def
R44476:44476 Imp <> X def
R44464:44474 Imp <> empty_state def
R44506:44513 Maps <> t_update def
R44542:44542 Imp <> Y def
R44516:44523 Maps <> t_update def
R44537:44537 Imp <> X def
R44525:44535 Imp <> empty_state def
R44506:44513 Maps <> t_update def
R44542:44542 Imp <> Y def
R44516:44523 Maps <> t_update def
R44537:44537 Imp <> X def
R44525:44535 Imp <> empty_state def
R44571:44573 Imp <> ::x_'/'_x_'\\'_x not
R44585:44588 Imp <> ::x_'/'_x_'\\'_x not
R44574:44584 Imp <> empty_state def
R44611:44613 Imp <> ::x_'/'_x_'\\'_x not
R44625:44628 Imp <> ::x_'/'_x_'\\'_x not
R44614:44624 Imp <> empty_state def
R44682:44689 Maps <> t_update def
R44703:44703 Imp <> X def
R44691:44701 Imp <> empty_state def
R44662:44666 Imp <> E_Seq constr
R44723:44727 Imp <> E_Ass constr
R44571:44573 Imp <> ::x_'/'_x_'\\'_x not
R44585:44588 Imp <> ::x_'/'_x_'\\'_x not
R44574:44584 Imp <> empty_state def
R44611:44613 Imp <> ::x_'/'_x_'\\'_x not
R44625:44628 Imp <> ::x_'/'_x_'\\'_x not
R44614:44624 Imp <> empty_state def
R44611:44613 Imp <> ::x_'/'_x_'\\'_x not
R44625:44628 Imp <> ::x_'/'_x_'\\'_x not
R44614:44624 Imp <> empty_state def
R44682:44689 Maps <> t_update def
R44703:44703 Imp <> X def
R44691:44701 Imp <> empty_state def
R44662:44666 Imp <> E_Seq constr
R44723:44727 Imp <> E_Ass constr
R44723:44727 Imp <> E_Ass constr
R44682:44689 Maps <> t_update def
R44703:44703 Imp <> X def
R44691:44701 Imp <> empty_state def
R44662:44666 Imp <> E_Seq constr
R44723:44727 Imp <> E_Ass constr
R44723:44727 Imp <> E_Ass constr
R44682:44689 Maps <> t_update def
R44703:44703 Imp <> X def
R44691:44701 Imp <> empty_state def
R44662:44666 Imp <> E_Seq constr
R44723:44727 Imp <> E_Ass constr
R44723:44727 Imp <> E_Ass constr
R44682:44689 Maps <> t_update def
R44703:44703 Imp <> X def
R44691:44701 Imp <> empty_state def
R44662:44666 Imp <> E_Seq constr
R44882:44884 Coq.Init.Logic <> :type_scope:x_'='_x not
R44905:44923 Imp <> ceval_deterministic thm
R44928:44938 Imp <> empty_state def
R44882:44884 Coq.Init.Logic <> :type_scope:x_'='_x not
R44905:44923 Imp <> ceval_deterministic thm
R44928:44938 Imp <> empty_state def
R44980:44982 Coq.Init.Logic <> :type_scope:x_'='_x not
R44979:44979 Imp <> Y def
R44987:44987 Imp <> Y def
R44980:44982 Coq.Init.Logic <> :type_scope:x_'='_x not
R44979:44979 Imp <> Y def
R44987:44987 Imp <> Y def
ind 45395:45414 <> var_not_used_in_aexp
constr 45445:45450 <> VNUNum
constr 45499:45503 <> VNUId
constr 45561:45567 <> VNUPlus
constr 45701:45708 <> VNUMinus
constr 45843:45849 <> VNUMult
R45419:45420 Maps <> id ind
R45425:45428 Imp <> aexp ind
R45463:45482 Equiv <> var_not_used_in_aexp ind
R45487:45490 Imp <> ANum constr
R45492:45492 Equiv <> n var
R45526:45545 Equiv <> var_not_used_in_aexp ind
R45550:45552 Imp <> AId constr
R45554:45554 Equiv <> Y var
R45517:45520 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R45521:45521 Equiv <> Y var
R45660:45679 Equiv <> var_not_used_in_aexp ind
R45684:45688 Imp <> APlus constr
R45693:45694 Equiv <> a2 var
R45690:45691 Equiv <> a1 var
R45625:45644 Equiv <> var_not_used_in_aexp ind
R45648:45649 Equiv <> a2 var
R45590:45609 Equiv <> var_not_used_in_aexp ind
R45613:45614 Equiv <> a1 var
R45801:45820 Equiv <> var_not_used_in_aexp ind
R45825:45830 Imp <> AMinus constr
R45835:45836 Equiv <> a2 var
R45832:45833 Equiv <> a1 var
R45766:45785 Equiv <> var_not_used_in_aexp ind
R45789:45790 Equiv <> a2 var
R45731:45750 Equiv <> var_not_used_in_aexp ind
R45754:45755 Equiv <> a1 var
R45942:45961 Equiv <> var_not_used_in_aexp ind
R45966:45970 Imp <> AMult constr
R45975:45976 Equiv <> a2 var
R45972:45973 Equiv <> a1 var
R45907:45926 Equiv <> var_not_used_in_aexp ind
R45930:45931 Equiv <> a2 var
R45872:45891 Equiv <> var_not_used_in_aexp ind
R45895:45896 Equiv <> a1 var
prf 45987:46001 <> aeval_weakening
R46081:46083 Coq.Init.Logic <> :type_scope:x_'='_x not
R46055:46059 Imp <> aeval def
R46080:46080 Equiv <> a var
R46062:46069 Maps <> t_update def
R46076:46077 Equiv <> ni var
R46074:46074 Equiv <> i var
R46071:46072 Equiv <> st var
R46084:46088 Imp <> aeval def
R46093:46093 Equiv <> a var
R46090:46091 Equiv <> st var
R46025:46044 Equiv <> var_not_used_in_aexp ind
R46048:46048 Equiv <> a var
R46046:46046 Equiv <> i var
prf 46403:46418 <> inequiv_exercise
R46423:46424 Coq.Init.Logic <> :type_scope:'~'_x not
R46425:46430 Equiv <> cequiv def
R46458:46461 Imp <> ::'SKIP' not
R46433:46438 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46444:46447 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46452:46455 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46439:46443 Imp <> BTrue constr
R46448:46451 Imp <> ::'SKIP' not
mod 48493:48496 <> Himp
ind 48594:48596 Himp com
constr 48612:48616 Himp CSkip
constr 48628:48631 Himp CAss
constr 48657:48660 Himp CSeq
constr 48686:48688 Himp CIf
constr 48722:48727 Himp CWhile
constr 48754:48759 Himp CHavoc
R48620:48622 Equiv <> com ind
R48649:48651 Equiv <> com ind
R48641:48644 Imp <> aexp ind
R48635:48636 Maps <> id ind
R48678:48680 Equiv <> com ind
R48671:48673 Equiv <> com ind
R48664:48666 Equiv <> com ind
R48714:48716 Equiv <> com ind
R48707:48709 Equiv <> com ind
R48700:48702 Equiv <> com ind
R48692:48695 Imp <> bexp ind
R48746:48748 Equiv <> com ind
R48739:48741 Equiv <> com ind
R48731:48734 Imp <> bexp ind
R48769:48771 Equiv <> com ind
R48763:48764 Maps <> id ind
R48829:48833 Equiv Himp CSkip constr
not 48815 Himp ::'SKIP'
R48863:48866 Equiv Himp CAss constr
not 48845 Himp ::x_'::='_x
R48914:48917 Equiv Himp CSeq constr
not 48897 Himp ::x_';;'_x
R49002:49007 Equiv Himp CWhile constr
not 48971 Himp ::'WHILE'_x_'DO'_x_'END'
R49101:49103 Equiv Himp CIf constr
not 49059 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R49176:49181 Equiv Himp CHavoc constr
not 49160 Himp ::'HAVOC'_x
ind 49610:49614 Himp ceval
constr 49655:49660 Himp E_Skip
constr 49703:49707 Himp E_Ass
constr 49833:49837 Himp E_Seq
constr 49969:49976 Himp E_IfTrue
constr 50133:50141 Himp E_IfFalse
constr 50299:50308 Himp E_WhileEnd
constr 50428:50438 Himp E_WhileLoop
R49634:49638 Imp <> state def
R49625:49629 Imp <> state def
R49618:49620 Equiv Himp com ind
R50684:50688 Equiv <> ceval ind
R49676:49680 Imp <> state def
R49687:49689 Equiv Himp ::x_'/'_x_'\\'_x not
R49692:49695 Equiv Himp ::x_'/'_x_'\\'_x not
R49683:49686 Equiv Himp ::'SKIP' not
R49690:49691 Equiv <> st var
R49696:49697 Equiv <> st var
R49724:49728 Imp <> state def
R49737:49740 Imp <> aexp ind
R49748:49750 Coq.Init.Datatypes <> nat ind
R49758:49759 Maps <> id ind
R49794:49794 Equiv Himp ::x_'/'_x_'\\'_x not
R49803:49806 Equiv Himp ::x_'/'_x_'\\'_x not
R49809:49812 Equiv Himp ::x_'/'_x_'\\'_x not
R49796:49800 Equiv Himp ::x_'::='_x not
R49795:49795 Equiv <> X var
R49801:49802 Equiv <> a1 var
R49807:49808 Equiv <> st var
R49813:49820 Maps <> t_update def
R49827:49827 Equiv <> n var
R49825:49825 Equiv <> X var
R49822:49823 Equiv <> st var
R49780:49782 Coq.Init.Logic <> :type_scope:x_'='_x not
R49769:49773 Imp <> aeval def
R49778:49779 Equiv <> a1 var
R49775:49776 Equiv <> st var
R49783:49783 Equiv <> n var
R49857:49859 Equiv Himp com ind
R49877:49881 Imp <> state def
R49941:49941 Equiv Himp ::x_'/'_x_'\\'_x not
R49950:49953 Equiv Himp ::x_'/'_x_'\\'_x not
R49956:49959 Equiv Himp ::x_'/'_x_'\\'_x not
R49944:49947 Equiv Himp ::x_';;'_x not
R49942:49943 Equiv <> c1 var
R49948:49949 Equiv <> c2 var
R49954:49955 Equiv <> st var
R49960:49963 Equiv <> st'' var
R49917:49919 Equiv Himp ::x_'/'_x_'\\'_x not
R49923:49926 Equiv Himp ::x_'/'_x_'\\'_x not
R49915:49916 Equiv <> c2 var
R49920:49922 Equiv <> st' var
R49927:49930 Equiv <> st'' var
R49893:49895 Equiv Himp ::x_'/'_x_'\\'_x not
R49898:49901 Equiv Himp ::x_'/'_x_'\\'_x not
R49891:49892 Equiv <> c1 var
R49896:49897 Equiv <> st var
R49902:49904 Equiv <> st' var
R49997:50001 Imp <> state def
R50010:50013 Imp <> bexp ind
R50025:50027 Equiv Himp com ind
R50089:50089 Equiv Himp ::x_'/'_x_'\\'_x not
R50115:50118 Equiv Himp ::x_'/'_x_'\\'_x not
R50121:50124 Equiv Himp ::x_'/'_x_'\\'_x not
R50090:50093 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50096:50101 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50104:50109 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50112:50114 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50094:50095 Equiv <> b1 var
R50102:50103 Equiv <> c1 var
R50110:50111 Equiv <> c2 var
R50119:50120 Equiv <> st var
R50125:50127 Equiv <> st' var
R50067:50069 Equiv Himp ::x_'/'_x_'\\'_x not
R50072:50075 Equiv Himp ::x_'/'_x_'\\'_x not
R50065:50066 Equiv <> c1 var
R50070:50071 Equiv <> st var
R50076:50078 Equiv <> st' var
R50048:50050 Coq.Init.Logic <> :type_scope:x_'='_x not
R50037:50041 Imp <> beval def
R50046:50047 Equiv <> b1 var
R50043:50044 Equiv <> st var
R50051:50054 Coq.Init.Datatypes <> true constr
R50162:50166 Imp <> state def
R50175:50178 Imp <> bexp ind
R50190:50192 Equiv Himp com ind
R50255:50255 Equiv Himp ::x_'/'_x_'\\'_x not
R50281:50284 Equiv Himp ::x_'/'_x_'\\'_x not
R50287:50290 Equiv Himp ::x_'/'_x_'\\'_x not
R50256:50259 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50262:50267 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50270:50275 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50278:50280 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50260:50261 Equiv <> b1 var
R50268:50269 Equiv <> c1 var
R50276:50277 Equiv <> c2 var
R50285:50286 Equiv <> st var
R50291:50293 Equiv <> st' var
R50233:50235 Equiv Himp ::x_'/'_x_'\\'_x not
R50238:50241 Equiv Himp ::x_'/'_x_'\\'_x not
R50231:50232 Equiv <> c2 var
R50236:50237 Equiv <> st var
R50242:50244 Equiv <> st' var
R50213:50215 Coq.Init.Logic <> :type_scope:x_'='_x not
R50202:50206 Imp <> beval def
R50211:50212 Equiv <> b1 var
R50208:50209 Equiv <> st var
R50216:50220 Coq.Init.Datatypes <> false constr
R50325:50328 Imp <> bexp ind
R50337:50341 Imp <> state def
R50350:50352 Equiv Himp com ind
R50392:50392 Equiv Himp ::x_'/'_x_'\\'_x not
R50411:50414 Equiv Himp ::x_'/'_x_'\\'_x not
R50417:50420 Equiv Himp ::x_'/'_x_'\\'_x not
R50393:50398 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50401:50404 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50407:50410 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50399:50400 Equiv <> b1 var
R50405:50406 Equiv <> c1 var
R50415:50416 Equiv <> st var
R50421:50422 Equiv <> st var
R50373:50375 Coq.Init.Logic <> :type_scope:x_'='_x not
R50362:50366 Imp <> beval def
R50371:50372 Equiv <> b1 var
R50368:50369 Equiv <> st var
R50376:50380 Coq.Init.Datatypes <> false constr
R50464:50468 Imp <> state def
R50477:50480 Imp <> bexp ind
R50489:50491 Equiv Himp com ind
R50597:50597 Equiv Himp ::x_'/'_x_'\\'_x not
R50616:50619 Equiv Himp ::x_'/'_x_'\\'_x not
R50622:50625 Equiv Himp ::x_'/'_x_'\\'_x not
R50598:50603 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50606:50609 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50612:50615 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50604:50605 Equiv <> b1 var
R50610:50611 Equiv <> c1 var
R50620:50621 Equiv <> st var
R50626:50629 Equiv <> st'' var
R50553:50553 Equiv Himp ::x_'/'_x_'\\'_x not
R50572:50575 Equiv Himp ::x_'/'_x_'\\'_x not
R50579:50582 Equiv Himp ::x_'/'_x_'\\'_x not
R50554:50559 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50562:50565 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50568:50571 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50560:50561 Equiv <> b1 var
R50566:50567 Equiv <> c1 var
R50576:50578 Equiv <> st' var
R50583:50586 Equiv <> st'' var
R50531:50533 Equiv Himp ::x_'/'_x_'\\'_x not
R50536:50539 Equiv Himp ::x_'/'_x_'\\'_x not
R50529:50530 Equiv <> c1 var
R50534:50535 Equiv <> st var
R50540:50542 Equiv <> st' var
R50512:50514 Coq.Init.Logic <> :type_scope:x_'='_x not
R50501:50505 Imp <> beval def
R50510:50511 Equiv <> b1 var
R50507:50508 Equiv <> st var
R50515:50518 Coq.Init.Datatypes <> true constr
R50684:50688 Equiv Himp ceval ind
not 50659 Himp ::x_'/'_x_'\\'_x
def 50803:50816 Himp havoc_example1
R50820:50820 Equiv Himp ::x_'/'_x_'\\'_x not
R50828:50831 Equiv Himp ::x_'/'_x_'\\'_x not
R50843:50846 Equiv Himp ::x_'/'_x_'\\'_x not
R50821:50826 Equiv Himp ::'HAVOC'_x not
R50827:50827 Imp <> X def
R50832:50842 Imp <> empty_state def
R50847:50854 Maps <> t_update def
R50868:50868 Imp <> X def
R50856:50866 Imp <> empty_state def
def 50918:50931 Himp havoc_example2
R50937:50937 Equiv Himp ::x_'/'_x_'\\'_x not
R50952:50955 Equiv Himp ::x_'/'_x_'\\'_x not
R50967:50970 Equiv Himp ::x_'/'_x_'\\'_x not
R50942:50944 Equiv Himp ::x_';;'_x not
R50938:50941 Equiv Himp ::'SKIP' not
R50945:50950 Equiv Himp ::'HAVOC'_x not
R50951:50951 Imp <> Z def
R50956:50966 Imp <> empty_state def
R50971:50978 Maps <> t_update def
R50992:50992 Imp <> Z def
R50980:50990 Imp <> empty_state def
def 51133:51138 Himp cequiv
R51149:51151 Equiv Himp com ind
R51180:51184 Imp <> state def
R51203:51207 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R51191:51193 Equiv Himp ::x_'/'_x_'\\'_x not
R51196:51199 Equiv Himp ::x_'/'_x_'\\'_x not
R51189:51190 Equiv <> c1 var
R51194:51195 Equiv <> st var
R51200:51202 Equiv <> st' var
R51210:51212 Equiv Himp ::x_'/'_x_'\\'_x not
R51215:51218 Equiv Himp ::x_'/'_x_'\\'_x not
R51208:51209 Equiv <> c2 var
R51213:51214 Equiv <> st var
R51219:51221 Equiv <> st' var
def 51438:51440 Himp pXY
R51454:51456 Equiv Himp ::x_';;'_x not
R51447:51452 Equiv Himp ::'HAVOC'_x not
R51453:51453 Imp <> X def
R51457:51462 Equiv Himp ::'HAVOC'_x not
R51463:51463 Imp <> Y def
def 51478:51480 Himp pYX
R51494:51496 Equiv Himp ::x_';;'_x not
R51487:51492 Equiv Himp ::'HAVOC'_x not
R51493:51493 Imp <> Y def
R51497:51502 Equiv Himp ::'HAVOC'_x not
R51503:51503 Imp <> X def
prf 51611:51624 Himp pXY_cequiv_pYX
R51644:51647 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R51630:51635 Equiv Himp cequiv def
R51641:51643 Equiv Himp pYX def
R51637:51639 Equiv Himp pXY def
R51648:51648 Coq.Init.Logic <> :type_scope:'~'_x not
R51649:51654 Equiv Himp cequiv def
R51660:51662 Equiv Himp pYX def
R51656:51658 Equiv Himp pXY def
def 51828:51833 Himp ptwice
R51847:51849 Equiv Himp ::x_';;'_x not
R51840:51845 Equiv Himp ::'HAVOC'_x not
R51846:51846 Imp <> X def
R51850:51855 Equiv Himp ::'HAVOC'_x not
R51856:51856 Imp <> Y def
def 51871:51875 Himp pcopy
R51889:51891 Equiv Himp ::x_';;'_x not
R51882:51887 Equiv Himp ::'HAVOC'_x not
R51888:51888 Imp <> X def
R51893:51897 Equiv Himp ::x_'::='_x not
R51892:51892 Imp <> Y def
R51898:51900 Imp <> AId constr
R51902:51902 Imp <> X def
prf 52073:52091 Himp ptwice_cequiv_pcopy
R52116:52119 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R52097:52102 Equiv Himp cequiv def
R52111:52115 Equiv Himp pcopy def
R52104:52109 Equiv Himp ptwice def
R52120:52120 Coq.Init.Logic <> :type_scope:'~'_x not
R52121:52126 Equiv Himp cequiv def
R52135:52139 Equiv Himp pcopy def
R52128:52133 Equiv Himp ptwice def
def 52985:52986 Himp p1
R52990:52992 Equiv Himp com ind
R52999:53005 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53033:53041 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53084:53089 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53006:53009 Imp <> BNot constr
R53012:53014 Imp <> BEq constr
R53025:53028 Imp <> ANum constr
R53017:53019 Imp <> AId constr
R53021:53021 Imp <> X def
R53049:53055 Equiv Himp ::x_';;'_x not
R53042:53047 Equiv Himp ::'HAVOC'_x not
R53048:53048 Imp <> Y def
R53057:53061 Equiv Himp ::x_'::='_x not
R53056:53056 Imp <> X def
R53062:53066 Imp <> APlus constr
R53077:53080 Imp <> ANum constr
R53069:53071 Imp <> AId constr
R53073:53073 Imp <> X def
def 53104:53105 Himp p2
R53109:53111 Equiv Himp com ind
R53118:53124 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53152:53160 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53165:53170 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53125:53128 Imp <> BNot constr
R53131:53133 Imp <> BEq constr
R53144:53147 Imp <> ANum constr
R53136:53138 Imp <> AId constr
R53140:53140 Imp <> X def
R53161:53164 Equiv Himp ::'SKIP' not
prf 53431:53444 Himp p1_may_diverge
R53478:53479 Coq.Init.Logic <> :type_scope:'~'_x not
R53482:53484 Equiv Himp ::x_'/'_x_'\\'_x not
R53487:53490 Equiv Himp ::x_'/'_x_'\\'_x not
R53480:53481 Equiv Himp p1 def
R53485:53486 Equiv <> st var
R53491:53493 Equiv <> st' var
R53467:53470 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R53463:53464 Equiv <> st var
R53466:53466 Imp <> X def
prf 53539:53552 Himp p2_may_diverge
R53586:53587 Coq.Init.Logic <> :type_scope:'~'_x not
R53590:53592 Equiv Himp ::x_'/'_x_'\\'_x not
R53595:53598 Equiv Himp ::x_'/'_x_'\\'_x not
R53588:53589 Equiv Himp p2 def
R53593:53594 Equiv <> st var
R53599:53601 Equiv <> st' var
R53575:53578 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R53571:53572 Equiv <> st var
R53574:53574 Imp <> X def
prf 53742:53752 Himp p1_p2_equiv
R53756:53761 Equiv Himp cequiv def
R53766:53767 Equiv Himp p2 def
R53763:53764 Equiv Himp p1 def
def 53949:53950 Himp p3
R53954:53956 Equiv Himp com ind
R53975:53979 Equiv Himp ::x_';;'_x not
R53964:53968 Equiv Himp ::x_'::='_x not
R53963:53963 Imp <> Z def
R53969:53972 Imp <> ANum constr
R53980:53986 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54014:54022 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54044:54049 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53987:53990 Imp <> BNot constr
R53993:53995 Imp <> BEq constr
R54006:54009 Imp <> ANum constr
R53998:54000 Imp <> AId constr
R54002:54002 Imp <> X def
R54030:54036 Equiv Himp ::x_';;'_x not
R54023:54028 Equiv Himp ::'HAVOC'_x not
R54029:54029 Imp <> X def
R54037:54042 Equiv Himp ::'HAVOC'_x not
R54043:54043 Imp <> Z def
def 54064:54065 Himp p4
R54069:54071 Equiv Himp com ind
R54092:54096 Equiv Himp ::x_';;'_x not
R54079:54084 Equiv Himp ::x_'::='_x not
R54091:54091 Equiv Himp ::x_'::='_x not
R54078:54078 Imp <> X def
R54085:54088 Imp <> ANum constr
R54098:54103 Equiv Himp ::x_'::='_x not
R54110:54110 Equiv Himp ::x_'::='_x not
R54097:54097 Imp <> Z def
R54104:54107 Imp <> ANum constr
prf 54123:54135 Himp p3_p4_inequiv
R54139:54140 Coq.Init.Logic <> :type_scope:'~'_x not
R54141:54146 Equiv Himp cequiv def
R54151:54152 Equiv Himp p4 def
R54148:54149 Equiv Himp p3 def
def 54279:54280 Himp p5
R54284:54286 Equiv Himp com ind
R54293:54299 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54327:54335 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54343:54348 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54300:54303 Imp <> BNot constr
R54306:54308 Imp <> BEq constr
R54319:54322 Imp <> ANum constr
R54311:54313 Imp <> AId constr
R54315:54315 Imp <> X def
R54336:54341 Equiv Himp ::'HAVOC'_x not
R54342:54342 Imp <> X def
def 54363:54364 Himp p6
R54368:54370 Equiv Himp com ind
R54378:54382 Equiv Himp ::x_'::='_x not
R54377:54377 Imp <> X def
R54383:54386 Imp <> ANum constr
prf 54401:54411 Himp p5_p6_equiv
R54415:54420 Equiv Himp cequiv def
R54425:54426 Equiv Himp p6 def
R54422:54423 Equiv Himp p5 def
R54480:54483 Equiv <> <> mod
prf 55166:55196 <> swap_noninterfering_assignments
R55299:55304 Equiv <> cequiv def
R55348:55350 Imp <> ::x_';;'_x not
R55341:55345 Imp <> ::x_'::='_x not
R55339:55340 Equiv <> l2 var
R55346:55347 Equiv <> a2 var
R55353:55357 Imp <> ::x_'::='_x not
R55351:55352 Equiv <> l1 var
R55358:55359 Equiv <> a1 var
R55320:55322 Imp <> ::x_';;'_x not
R55313:55317 Imp <> ::x_'::='_x not
R55311:55312 Equiv <> l1 var
R55318:55319 Equiv <> a1 var
R55325:55329 Imp <> ::x_'::='_x not
R55323:55324 Equiv <> l2 var
R55330:55331 Equiv <> a2 var
R55267:55286 Equiv <> var_not_used_in_aexp ind
R55291:55292 Equiv <> a1 var
R55288:55289 Equiv <> l2 var
R55235:55254 Equiv <> var_not_used_in_aexp ind
R55259:55260 Equiv <> a2 var
R55256:55257 Equiv <> l1 var
R55223:55226 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R55221:55222 Equiv <> l1 var
R55227:55228 Equiv <> l2 var
def 55848:55854 <> capprox
R55865:55867 Imp <> com ind
R55897:55901 Imp <> state def
R55927:55929 Imp <> ::x_'/'_x_'\\'_x not
R55932:55935 Imp <> ::x_'/'_x_'\\'_x not
R55925:55926 Equiv <> c2 var
R55930:55931 Equiv <> st var
R55936:55938 Equiv <> st' var
R55909:55911 Imp <> ::x_'/'_x_'\\'_x not
R55914:55917 Imp <> ::x_'/'_x_'\\'_x not
R55907:55908 Equiv <> c1 var
R55912:55913 Equiv <> st var
R55918:55920 Equiv <> st' var
def 56335:56336 <> c3
R56340:56342 Imp <> com ind
R56366:56370 SfLib <> admit prfax
def 56384:56385 <> c4
R56389:56391 Imp <> com ind
R56415:56419 SfLib <> admit prfax
prf 56431:56445 <> c3_c4_different
R56464:56467 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R56449:56450 Coq.Init.Logic <> :type_scope:'~'_x not
R56451:56457 Equiv <> capprox def
R56462:56463 Equiv <> c4 def
R56459:56460 Equiv <> c3 def
R56468:56469 Coq.Init.Logic <> :type_scope:'~'_x not
R56470:56476 Equiv <> capprox def
R56481:56482 Equiv <> c3 def
R56478:56479 Equiv <> c4 def
def 56602:56605 <> cmin
R56609:56611 Imp <> com ind
R56637:56641 SfLib <> admit prfax
prf 56653:56664 <> cmin_minimal
R56678:56684 Equiv <> capprox def
R56691:56691 Equiv <> c var
R56686:56689 Equiv <> cmin def
def 56868:56872 <> zprop
R56879:56881 Imp <> com ind
R56915:56919 SfLib <> admit prfax
prf 56932:56947 <> zprop_preserving
R56993:56997 Equiv <> zprop def
R56999:57000 Equiv <> c' var
R56977:56983 Equiv <> capprox def
R56987:56988 Equiv <> c' var
R56985:56985 Equiv <> c var
R56966:56970 Equiv <> zprop def
R56972:56972 Equiv <> c var
