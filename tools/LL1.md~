一个递归下降语法分析程序由一组过程组成，每个非终结符号对应一个过程，程序的执行从开始符号对应的过程开始，如果这个过程的过程体扫描了整个输入串，它就停止并宣布语法分析成功。
```
stat->returnstat
retustat->returnExpr;
Expr->x+1
所以，有三个函数。

void stat()
{ returnstat(); }
void returnstat() { match("return" ); expr(); match(";" ); }
void expr()
{ match("x" ); match("+" ); match("1" ); }
```

何为LL(1)？通俗来说就是向前看一个词法单元的自顶向下解析器。两个L都代表left-to-right，第一个L表示解析器按“从左到右”的顺序解析输入内容；第二个L表示下降解析时也是按“从左到右”的顺序遍历子节点。而(1)表示它使用向前看一个词法单元。

关于LL（1）文法，这是一种确定的自顶向下的分析方法。它要求满足first集合和follow集合。有的不满足，需要提取左公因式和消去左递归。
左公因式：A->aB|aC
改写成：
A->aA'
A'->B|C
左递归：
A->Aa|b
改成右递归：
A->bA'
A'->aA‘|@
LL(1)文法的实现是递归下降分析法。
设计表达式时，采用BNF，最好是EBNF。
