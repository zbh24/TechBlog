DIGEST 0120af1e8124475726db24f5ecc0f09f
FEquiv
R53:65 Coq.Bool.Bool <> <> lib
R83:97 Coq.Arith.Arith <> <> lib
R115:129 Coq.Arith.EqNat <> <> lib
R147:161 Coq.omega.Omega <> <> lib
R179:192 Coq.Lists.List <> <> lib
R210:243 Coq.Logic.FunctionalExtensionality <> <> lib
R284:288 SfLib <> <> lib
R306:309 Maps <> <> lib
R327:329 Imp <> <> lib
def 2575:2580 <> aequiv
R2591:2594 Imp <> aexp ind
R2620:2624 Imp <> state def
R2643:2645 Coq.Init.Logic <> :type_scope:x_'='_x not
R2632:2636 Imp <> aeval def
R2641:2642 Equiv <> a1 var
R2638:2639 Equiv <> st var
R2646:2650 Imp <> aeval def
R2655:2656 Equiv <> a2 var
R2652:2653 Equiv <> st var
def 2671:2676 <> bequiv
R2687:2690 Imp <> bexp ind
R2716:2720 Imp <> state def
R2739:2741 Coq.Init.Logic <> :type_scope:x_'='_x not
R2728:2732 Imp <> beval def
R2737:2738 Equiv <> b1 var
R2734:2735 Equiv <> st var
R2742:2746 Imp <> beval def
R2751:2752 Equiv <> b2 var
R2748:2749 Equiv <> st var
def 3424:3429 <> cequiv
R3440:3442 Imp <> com ind
R3474:3478 Imp <> state def
R3486:3486 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3501:3507 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3522:3522 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3489:3491 Imp <> ::x_'/'_x_'\\'_x not
R3494:3497 Imp <> ::x_'/'_x_'\\'_x not
R3487:3488 Equiv <> c1 var
R3492:3493 Equiv <> st var
R3498:3500 Equiv <> st' var
R3510:3512 Imp <> ::x_'/'_x_'\\'_x not
R3515:3518 Imp <> ::x_'/'_x_'\\'_x not
R3508:3509 Equiv <> c2 var
R3513:3514 Equiv <> st var
R3519:3521 Equiv <> st' var
def 4097:4102 <> prog_a
R4106:4108 Imp <> com ind
R4115:4120 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4148:4155 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4184:4189 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4121:4124 Imp <> BNot constr
R4127:4129 Imp <> BLe constr
R4140:4143 Imp <> ANum constr
R4132:4134 Imp <> AId constr
R4136:4136 Imp <> X def
R4157:4161 Imp <> ::x_'::='_x not
R4156:4156 Imp <> X def
R4162:4166 Imp <> APlus constr
R4177:4180 Imp <> ANum constr
R4169:4171 Imp <> AId constr
R4173:4173 Imp <> X def
def 4204:4209 <> prog_b
R4213:4215 Imp <> com ind
R4332:4336 Imp <> ::x_';;'_x not
R4222:4225 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4246:4255 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4303:4314 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4327:4331 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4226:4228 Imp <> BEq constr
R4239:4242 Imp <> ANum constr
R4231:4233 Imp <> AId constr
R4235:4235 Imp <> X def
R4284:4290 Imp <> ::x_';;'_x not
R4257:4261 Imp <> ::x_'::='_x not
R4256:4256 Imp <> X def
R4262:4266 Imp <> APlus constr
R4277:4280 Imp <> ANum constr
R4269:4271 Imp <> AId constr
R4273:4273 Imp <> X def
R4292:4296 Imp <> ::x_'::='_x not
R4291:4291 Imp <> Y def
R4297:4300 Imp <> ANum constr
R4316:4320 Imp <> ::x_'::='_x not
R4315:4315 Imp <> Y def
R4321:4324 Imp <> ANum constr
R4365:4369 Imp <> ::x_';;'_x not
R4338:4342 Imp <> ::x_'::='_x not
R4337:4337 Imp <> X def
R4343:4348 Imp <> AMinus constr
R4359:4361 Imp <> AId constr
R4363:4363 Imp <> Y def
R4351:4353 Imp <> AId constr
R4355:4355 Imp <> X def
R4371:4375 Imp <> ::x_'::='_x not
R4370:4370 Imp <> Y def
R4376:4379 Imp <> ANum constr
def 4396:4401 <> prog_c
R4405:4407 Imp <> com ind
R4414:4417 Imp <> ::'SKIP' not
def 4432:4437 <> prog_d
R4441:4443 Imp <> com ind
R4450:4455 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4483:4490 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4535:4540 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4456:4459 Imp <> BNot constr
R4462:4464 Imp <> BEq constr
R4475:4478 Imp <> ANum constr
R4467:4469 Imp <> AId constr
R4471:4471 Imp <> X def
R4492:4496 Imp <> ::x_'::='_x not
R4491:4491 Imp <> X def
R4497:4501 Imp <> APlus constr
R4528:4531 Imp <> ANum constr
R4504:4508 Imp <> AMult constr
R4519:4521 Imp <> AId constr
R4523:4523 Imp <> Y def
R4511:4513 Imp <> AId constr
R4515:4515 Imp <> X def
def 4555:4560 <> prog_e
R4564:4566 Imp <> com ind
R4574:4578 Imp <> ::x_'::='_x not
R4573:4573 Imp <> Y def
R4579:4582 Imp <> ANum constr
def 4599:4604 <> prog_f
R4608:4610 Imp <> com ind
R4645:4649 Imp <> ::x_';;'_x not
R4618:4622 Imp <> ::x_'::='_x not
R4617:4617 Imp <> Y def
R4623:4627 Imp <> APlus constr
R4638:4641 Imp <> ANum constr
R4630:4632 Imp <> AId constr
R4634:4634 Imp <> X def
R4650:4655 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4682:4689 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4718:4723 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4656:4659 Imp <> BNot constr
R4662:4664 Imp <> BEq constr
R4675:4677 Imp <> AId constr
R4679:4679 Imp <> Y def
R4667:4669 Imp <> AId constr
R4671:4671 Imp <> X def
R4691:4695 Imp <> ::x_'::='_x not
R4690:4690 Imp <> Y def
R4696:4700 Imp <> APlus constr
R4711:4714 Imp <> ANum constr
R4703:4705 Imp <> AId constr
R4707:4707 Imp <> X def
def 4738:4743 <> prog_g
R4747:4749 Imp <> com ind
R4756:4761 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4767:4774 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4779:4784 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4762:4766 Imp <> BTrue constr
R4775:4778 Imp <> ::'SKIP' not
def 4799:4804 <> prog_h
R4808:4810 Imp <> com ind
R4817:4822 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4849:4856 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4885:4890 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4823:4826 Imp <> BNot constr
R4829:4831 Imp <> BEq constr
R4842:4844 Imp <> AId constr
R4846:4846 Imp <> X def
R4834:4836 Imp <> AId constr
R4838:4838 Imp <> X def
R4858:4862 Imp <> ::x_'::='_x not
R4857:4857 Imp <> X def
R4863:4867 Imp <> APlus constr
R4878:4881 Imp <> ANum constr
R4870:4872 Imp <> AId constr
R4874:4874 Imp <> X def
def 4905:4910 <> prog_i
R4914:4916 Imp <> com ind
R4923:4928 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4955:4962 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4991:4996 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4929:4932 Imp <> BNot constr
R4935:4937 Imp <> BEq constr
R4948:4950 Imp <> AId constr
R4952:4952 Imp <> Y def
R4940:4942 Imp <> AId constr
R4944:4944 Imp <> X def
R4964:4968 Imp <> ::x_'::='_x not
R4963:4963 Imp <> X def
R4969:4973 Imp <> APlus constr
R4984:4987 Imp <> ANum constr
R4976:4978 Imp <> AId constr
R4980:4980 Imp <> Y def
def 5011:5023 <> equiv_classes
R5027:5030 Coq.Init.Datatypes <> list ind
R5033:5036 Coq.Init.Datatypes <> list ind
R5038:5040 Imp <> com ind
R5065:5069 SfLib <> admit prfax
prf 5270:5283 <> aequiv_example
R5288:5293 Equiv <> aequiv def
R5321:5324 Imp <> ANum constr
R5296:5301 Imp <> AMinus constr
R5312:5314 Imp <> AId constr
R5316:5316 Imp <> X def
R5304:5306 Imp <> AId constr
R5308:5308 Imp <> X def
prf 5378:5391 <> bequiv_example
R5396:5401 Equiv <> bequiv def
R5443:5447 Imp <> BTrue constr
R5404:5406 Imp <> BEq constr
R5434:5437 Imp <> ANum constr
R5409:5414 Imp <> AMinus constr
R5425:5427 Imp <> AId constr
R5429:5429 Imp <> X def
R5417:5419 Imp <> AId constr
R5421:5421 Imp <> X def
R5477:5481 Imp <> beval def
R5494:5507 Equiv <> aequiv_example thm
R5494:5507 Equiv <> aequiv_example thm
prf 5667:5675 <> skip_left
R5690:5695 Equiv <> cequiv def
R5718:5718 Equiv <> c var
R5707:5709 Imp <> ::x_';;'_x not
R5703:5706 Imp <> ::'SKIP' not
R5710:5710 Equiv <> c var
R5891:5895 Imp <> E_Seq constr
R5891:5895 Imp <> E_Seq constr
R5916:5921 Imp <> E_Skip constr
R5916:5921 Imp <> E_Skip constr
prf 6086:6095 <> skip_right
R6110:6115 Equiv <> cequiv def
R6137:6137 Equiv <> c var
R6123:6126 Imp <> ::x_';;'_x not
R6122:6122 Equiv <> c var
R6127:6130 Imp <> ::'SKIP' not
prf 6284:6298 <> IFB_true_simple
R6317:6322 Equiv <> cequiv def
R6363:6364 Equiv <> c1 var
R6329:6332 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6338:6343 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6346:6351 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6354:6356 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6333:6337 Imp <> BTrue constr
R6344:6345 Equiv <> c1 var
R6352:6353 Equiv <> c2 var
R6495:6502 Imp <> E_IfTrue constr
R6495:6502 Imp <> E_IfTrue constr
prf 8414:8421 <> IFB_true
R8469:8474 Equiv <> cequiv def
R8517:8518 Equiv <> c1 var
R8484:8487 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8489:8494 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8497:8502 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8505:8507 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8488:8488 Equiv <> b var
R8495:8496 Equiv <> c1 var
R8503:8504 Equiv <> c2 var
R8445:8450 Equiv <> bequiv def
R8454:8458 Imp <> BTrue constr
R8452:8452 Equiv <> b var
R8717:8722 Equiv <> bequiv def
R8811:8818 Imp <> E_IfTrue constr
R8811:8818 Imp <> E_IfTrue constr
R8848:8853 Equiv <> bequiv def
prf 8975:8983 <> IFB_false
R9026:9031 Equiv <> cequiv def
R9068:9069 Equiv <> c2 var
R9038:9041 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9043:9048 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9051:9056 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9059:9061 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9042:9042 Equiv <> b var
R9049:9050 Equiv <> c1 var
R9057:9058 Equiv <> c2 var
R9004:9009 Equiv <> bequiv def
R9013:9018 Imp <> BFalse constr
R9011:9011 Equiv <> b var
prf 9261:9276 <> swap_if_branches
R9297:9302 Equiv <> cequiv def
R9340:9343 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9350:9355 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9358:9363 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9366:9368 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9344:9347 Imp <> BNot constr
R9349:9349 Equiv <> b var
R9356:9357 Equiv <> e2 var
R9364:9365 Equiv <> e1 var
R9309:9312 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9314:9319 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9322:9327 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9330:9332 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9313:9313 Equiv <> b var
R9320:9321 Equiv <> e1 var
R9328:9329 Equiv <> e2 var
prf 9750:9760 <> WHILE_false
R9805:9810 Equiv <> cequiv def
R9845:9848 Imp <> ::'SKIP' not
R9820:9825 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9827:9830 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9832:9835 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9826:9826 Equiv <> b var
R9831:9831 Equiv <> c var
R9781:9786 Equiv <> bequiv def
R9790:9795 Imp <> BFalse constr
R9788:9788 Equiv <> b var
R9964:9969 Imp <> E_Skip constr
R9964:9969 Imp <> E_Skip constr
R10081:10090 Imp <> E_WhileEnd constr
R10081:10090 Imp <> E_WhileEnd constr
prf 11418:11435 <> WHILE_true_nonterm
R11486:11488 Coq.Init.Logic <> :type_scope:'~'_x not
R11519:11520 Coq.Init.Logic <> :type_scope:'~'_x not
R11489:11489 Imp <> ::x_'/'_x_'\\'_x not
R11506:11509 Imp <> ::x_'/'_x_'\\'_x not
R11512:11515 Imp <> ::x_'/'_x_'\\'_x not
R11490:11495 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11497:11500 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11502:11505 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11496:11496 Equiv <> b var
R11501:11501 Equiv <> c var
R11510:11511 Equiv <> st var
R11516:11518 Equiv <> st' var
R11463:11468 Equiv <> bequiv def
R11472:11476 Imp <> BTrue constr
R11470:11470 Equiv <> b var
R11602:11607 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11609:11612 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11614:11617 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11602:11607 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11609:11612 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11614:11617 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11909:11914 Equiv <> bequiv def
prf 12444:12453 <> WHILE_true
R12497:12502 Equiv <> cequiv def
R12538:12543 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12549:12552 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12557:12560 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12544:12548 Imp <> BTrue constr
R12553:12556 Imp <> ::'SKIP' not
R12512:12517 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12519:12522 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12524:12527 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12518:12518 Equiv <> b var
R12523:12523 Equiv <> c var
R12473:12478 Equiv <> bequiv def
R12482:12486 Imp <> BTrue constr
R12480:12480 Equiv <> b var
prf 12621:12634 <> loop_unrolling
R12651:12656 Equiv <> cequiv def
R12686:12689 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12691:12697 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12718:12724 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12729:12731 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12690:12690 Equiv <> b var
R12699:12701 Imp <> ::x_';;'_x not
R12698:12698 Equiv <> c var
R12702:12707 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12709:12712 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12714:12717 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12708:12708 Equiv <> b var
R12713:12713 Equiv <> c var
R12725:12728 Imp <> ::'SKIP' not
R12663:12668 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12670:12673 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12675:12678 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12669:12669 Equiv <> b var
R12674:12674 Equiv <> c var
R12888:12896 Imp <> E_IfFalse constr
R12888:12896 Imp <> E_IfFalse constr
R12917:12922 Imp <> E_Skip constr
R12917:12922 Imp <> E_Skip constr
R12959:12966 Imp <> E_IfTrue constr
R12959:12966 Imp <> E_IfTrue constr
R12993:12997 Imp <> E_Seq constr
R12993:12997 Imp <> E_Seq constr
R13143:13153 Imp <> E_WhileLoop constr
R13143:13153 Imp <> E_WhileLoop constr
R13279:13288 Imp <> E_WhileEnd constr
R13279:13288 Imp <> E_WhileEnd constr
prf 13371:13379 <> seq_assoc
R13402:13407 Equiv <> cequiv def
R13427:13429 Imp <> ::x_';;'_x not
R13436:13436 Imp <> ::x_';;'_x not
R13425:13426 Equiv <> c1 var
R13432:13433 Imp <> ::x_';;'_x not
R13430:13431 Equiv <> c2 var
R13434:13435 Equiv <> c3 var
R13410:13410 Imp <> ::x_';;'_x not
R13417:13419 Imp <> ::x_';;'_x not
R13413:13414 Imp <> ::x_';;'_x not
R13411:13412 Equiv <> c1 var
R13415:13416 Equiv <> c2 var
R13420:13421 Equiv <> c3 var
prf 13714:13732 <> identity_assignment
R13746:13747 Maps <> id ind
R13753:13758 Equiv <> cequiv def
R13782:13785 Imp <> ::'SKIP' not
R13766:13770 Imp <> ::x_'::='_x not
R13765:13765 Equiv <> X var
R13771:13773 Imp <> AId constr
R13775:13775 Equiv <> X var
R13888:13895 Maps <> t_update def
R13888:13895 Maps <> t_update def
R13952:13976 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R13952:13976 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R14001:14013 Maps <> t_update_same prfax
R14001:14013 Maps <> t_update_same prfax
R14090:14093 Coq.Init.Logic <> :type_scope:x_'='_x not
R14116:14116 Coq.Init.Logic <> :type_scope:x_'='_x not
R14094:14101 Maps <> t_update def
R14090:14093 Coq.Init.Logic <> :type_scope:x_'='_x not
R14116:14116 Coq.Init.Logic <> :type_scope:x_'='_x not
R14094:14101 Maps <> t_update def
R14136:14160 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R14136:14160 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R14188:14200 Maps <> t_update_same prfax
R14188:14200 Maps <> t_update_same prfax
prf 14347:14359 <> assign_aequiv
R14399:14404 Equiv <> cequiv def
R14413:14417 Imp <> ::x_'::='_x not
R14412:14412 Equiv <> X var
R14418:14418 Equiv <> e var
R14406:14409 Imp <> ::'SKIP' not
R14377:14382 Equiv <> aequiv def
R14392:14392 Equiv <> e var
R14385:14387 Imp <> AId constr
R14389:14389 Equiv <> X var
prf 15006:15016 <> refl_aequiv
R15032:15035 Imp <> aexp ind
R15039:15044 Equiv <> aequiv def
R15048:15048 Equiv <> a var
R15046:15046 Equiv <> a var
prf 15099:15108 <> sym_aequiv
R15128:15131 Imp <> aexp ind
R15153:15158 Equiv <> aequiv def
R15163:15164 Equiv <> a1 var
R15160:15161 Equiv <> a2 var
R15137:15142 Equiv <> aequiv def
R15147:15148 Equiv <> a2 var
R15144:15145 Equiv <> a1 var
prf 15235:15246 <> trans_aequiv
R15269:15272 Imp <> aexp ind
R15310:15315 Equiv <> aequiv def
R15320:15321 Equiv <> a3 var
R15317:15318 Equiv <> a1 var
R15294:15299 Equiv <> aequiv def
R15304:15305 Equiv <> a3 var
R15301:15302 Equiv <> a2 var
R15278:15283 Equiv <> aequiv def
R15288:15289 Equiv <> a2 var
R15285:15286 Equiv <> a1 var
R15340:15345 Equiv <> aequiv def
prf 15440:15450 <> refl_bequiv
R15466:15469 Imp <> bexp ind
R15473:15478 Equiv <> bequiv def
R15482:15482 Equiv <> b var
R15480:15480 Equiv <> b var
R15501:15506 Equiv <> bequiv def
prf 15548:15557 <> sym_bequiv
R15577:15580 Imp <> bexp ind
R15602:15607 Equiv <> bequiv def
R15612:15613 Equiv <> b1 var
R15609:15610 Equiv <> b2 var
R15586:15591 Equiv <> bequiv def
R15596:15597 Equiv <> b2 var
R15593:15594 Equiv <> b1 var
R15632:15637 Equiv <> bequiv def
prf 15699:15710 <> trans_bequiv
R15733:15736 Imp <> bexp ind
R15774:15779 Equiv <> bequiv def
R15784:15785 Equiv <> b3 var
R15781:15782 Equiv <> b1 var
R15758:15763 Equiv <> bequiv def
R15768:15769 Equiv <> b3 var
R15765:15766 Equiv <> b2 var
R15742:15747 Equiv <> bequiv def
R15752:15753 Equiv <> b2 var
R15749:15750 Equiv <> b1 var
R15804:15809 Equiv <> bequiv def
prf 15904:15914 <> refl_cequiv
R15930:15932 Imp <> com ind
R15936:15941 Equiv <> cequiv def
R15945:15945 Equiv <> c var
R15943:15943 Equiv <> c var
R15964:15969 Equiv <> cequiv def
R15995:16002 Coq.Init.Logic <> iff_refl thm
R15995:16002 Coq.Init.Logic <> iff_refl thm
prf 16018:16027 <> sym_cequiv
R16047:16049 Imp <> com ind
R16071:16076 Equiv <> cequiv def
R16081:16082 Equiv <> c1 var
R16078:16079 Equiv <> c2 var
R16055:16060 Equiv <> cequiv def
R16065:16066 Equiv <> c2 var
R16062:16063 Equiv <> c1 var
R16101:16106 Equiv <> cequiv def
R16156:16160 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16144:16146 Imp <> ::x_'/'_x_'\\'_x not
R16149:16152 Imp <> ::x_'/'_x_'\\'_x not
R16163:16165 Imp <> ::x_'/'_x_'\\'_x not
R16168:16171 Imp <> ::x_'/'_x_'\\'_x not
R16156:16160 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16144:16146 Imp <> ::x_'/'_x_'\\'_x not
R16149:16152 Imp <> ::x_'/'_x_'\\'_x not
R16163:16165 Imp <> ::x_'/'_x_'\\'_x not
R16168:16171 Imp <> ::x_'/'_x_'\\'_x not
R16232:16238 Coq.Init.Logic <> iff_sym thm
R16232:16238 Coq.Init.Logic <> iff_sym thm
prf 16265:16273 <> iff_trans
R16338:16342 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16336:16337 Equiv <> P1 var
R16343:16344 Equiv <> P3 var
R16323:16327 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16321:16322 Equiv <> P2 var
R16328:16329 Equiv <> P3 var
R16308:16312 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16306:16307 Equiv <> P1 var
R16313:16314 Equiv <> P2 var
prf 16511:16522 <> trans_cequiv
R16545:16547 Imp <> com ind
R16585:16590 Equiv <> cequiv def
R16595:16596 Equiv <> c3 var
R16592:16593 Equiv <> c1 var
R16569:16574 Equiv <> cequiv def
R16579:16580 Equiv <> c3 var
R16576:16577 Equiv <> c2 var
R16553:16558 Equiv <> cequiv def
R16563:16564 Equiv <> c2 var
R16560:16561 Equiv <> c1 var
R16615:16620 Equiv <> cequiv def
R16681:16683 Imp <> ::x_'/'_x_'\\'_x not
R16686:16689 Imp <> ::x_'/'_x_'\\'_x not
R16663:16671 Equiv <> iff_trans thm
R16681:16683 Imp <> ::x_'/'_x_'\\'_x not
R16686:16689 Imp <> ::x_'/'_x_'\\'_x not
R16663:16671 Equiv <> iff_trans thm
prf 18072:18086 <> CAss_congruence
R18128:18133 Equiv <> cequiv def
R18148:18151 Imp <> CAss constr
R18155:18157 Equiv <> a1' var
R18153:18153 Equiv <> i var
R18136:18139 Imp <> CAss constr
R18143:18144 Equiv <> a1 var
R18141:18141 Equiv <> i var
R18109:18114 Equiv <> aequiv def
R18119:18121 Equiv <> a1' var
R18116:18117 Equiv <> a1 var
R18270:18274 Imp <> E_Ass constr
R18270:18274 Imp <> E_Ass constr
R18356:18360 Imp <> E_Ass constr
R18356:18360 Imp <> E_Ass constr
prf 20212:20228 <> CWhile_congruence
R20292:20297 Equiv <> cequiv def
R20321:20326 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20330:20333 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20337:20340 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20327:20329 Equiv <> b1' var
R20334:20336 Equiv <> c1' var
R20300:20305 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20308:20311 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20314:20317 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20306:20307 Equiv <> b1 var
R20312:20313 Equiv <> c1 var
R20273:20278 Equiv <> cequiv def
R20283:20285 Equiv <> c1' var
R20280:20281 Equiv <> c1 var
R20256:20261 Equiv <> bequiv def
R20266:20268 Equiv <> b1' var
R20263:20264 Equiv <> b1 var
R20384:20389 Equiv <> bequiv def
R20391:20396 Equiv <> cequiv def
R20488:20493 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20496:20499 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20502:20505 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20488:20493 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20496:20499 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20502:20505 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20621:20630 Imp <> E_WhileEnd constr
R20621:20630 Imp <> E_WhileEnd constr
R20695:20705 Imp <> E_WhileLoop constr
R20695:20705 Imp <> E_WhileLoop constr
R20954:20959 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20963:20966 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20970:20973 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20954:20959 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20963:20966 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20970:20973 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21092:21101 Imp <> E_WhileEnd constr
R21092:21101 Imp <> E_WhileEnd constr
R21166:21176 Imp <> E_WhileLoop constr
R21166:21176 Imp <> E_WhileLoop constr
prf 21472:21486 <> CSeq_congruence
R21550:21555 Equiv <> cequiv def
R21570:21571 Imp <> ::x_';;'_x not
R21567:21569 Equiv <> c1' var
R21572:21574 Equiv <> c2' var
R21560:21561 Imp <> ::x_';;'_x not
R21558:21559 Equiv <> c1 var
R21562:21563 Equiv <> c2 var
R21531:21536 Equiv <> cequiv def
R21541:21543 Equiv <> c2' var
R21538:21539 Equiv <> c2 var
R21514:21519 Equiv <> cequiv def
R21524:21526 Equiv <> c1' var
R21521:21522 Equiv <> c1 var
prf 21683:21696 <> CIf_congruence
R21780:21785 Equiv <> cequiv def
R21824:21827 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21830:21835 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21839:21844 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21848:21850 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21828:21829 Equiv <> b' var
R21836:21838 Equiv <> c1' var
R21845:21847 Equiv <> c2' var
R21788:21791 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21793:21798 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21801:21806 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21809:21811 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R21792:21792 Equiv <> b var
R21799:21800 Equiv <> c1 var
R21807:21808 Equiv <> c2 var
R21761:21766 Equiv <> cequiv def
R21771:21773 Equiv <> c2' var
R21768:21769 Equiv <> c2 var
R21744:21749 Equiv <> cequiv def
R21754:21756 Equiv <> c1' var
R21751:21752 Equiv <> c1 var
R21729:21734 Equiv <> bequiv def
R21738:21739 Equiv <> b' var
R21736:21736 Equiv <> b var
def 22005:22022 <> congruence_example
R22027:22032 Equiv <> cequiv def
R22215:22222 Imp <> ::x_';;'_x not
R22204:22208 Imp <> ::x_'::='_x not
R22203:22203 Imp <> X def
R22209:22212 Imp <> ANum constr
R22223:22227 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22248:22266 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22295:22338 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22352:22359 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22228:22230 Imp <> BEq constr
R22241:22244 Imp <> ANum constr
R22233:22235 Imp <> AId constr
R22237:22237 Imp <> X def
R22268:22272 Imp <> ::x_'::='_x not
R22267:22267 Imp <> Y def
R22273:22278 Imp <> AMinus constr
R22289:22291 Imp <> AId constr
R22293:22293 Imp <> X def
R22281:22283 Imp <> AId constr
R22285:22285 Imp <> X def
R22340:22344 Imp <> ::x_'::='_x not
R22339:22339 Imp <> Y def
R22345:22348 Imp <> ANum constr
R22072:22079 Imp <> ::x_';;'_x not
R22061:22065 Imp <> ::x_'::='_x not
R22060:22060 Imp <> X def
R22066:22069 Imp <> ANum constr
R22080:22084 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22105:22123 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22136:22153 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22167:22174 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22085:22087 Imp <> BEq constr
R22098:22101 Imp <> ANum constr
R22090:22092 Imp <> AId constr
R22094:22094 Imp <> X def
R22125:22129 Imp <> ::x_'::='_x not
R22124:22124 Imp <> Y def
R22130:22133 Imp <> ANum constr
R22155:22159 Imp <> ::x_'::='_x not
R22154:22154 Imp <> Y def
R22160:22163 Imp <> ANum constr
R22378:22392 Equiv <> CSeq_congruence prfax
R22378:22392 Equiv <> CSeq_congruence prfax
R22405:22415 Equiv <> refl_cequiv thm
R22405:22415 Equiv <> refl_cequiv thm
R22428:22441 Equiv <> CIf_congruence prfax
R22428:22441 Equiv <> CIf_congruence prfax
R22456:22466 Equiv <> refl_bequiv thm
R22456:22466 Equiv <> refl_bequiv thm
R22481:22495 Equiv <> CAss_congruence thm
R22481:22495 Equiv <> CAss_congruence thm
R22505:22510 Equiv <> aequiv def
R22544:22553 Coq.Arith.Minus <> minus_diag thm
R22544:22553 Coq.Arith.Minus <> minus_diag thm
R22568:22578 Equiv <> refl_cequiv thm
R22568:22578 Equiv <> refl_cequiv thm
def 23039:23050 <> atrans_sound
R23070:23073 Imp <> aexp ind
R23062:23065 Imp <> aexp ind
R23100:23103 Imp <> aexp ind
R23111:23116 Equiv <> aequiv def
R23121:23126 Equiv <> atrans var
R23128:23128 Equiv <> a var
R23118:23118 Equiv <> a var
def 23144:23155 <> btrans_sound
R23175:23178 Imp <> bexp ind
R23167:23170 Imp <> bexp ind
R23205:23208 Imp <> bexp ind
R23216:23221 Equiv <> bequiv def
R23226:23231 Equiv <> btrans var
R23233:23233 Equiv <> b var
R23223:23223 Equiv <> b var
def 23249:23260 <> ctrans_sound
R23279:23281 Imp <> com ind
R23272:23274 Imp <> com ind
R23308:23310 Imp <> com ind
R23318:23323 Equiv <> cequiv def
R23328:23333 Equiv <> ctrans var
R23335:23335 Equiv <> c var
R23325:23325 Equiv <> c var
def 23652:23670 <> fold_constants_aexp
R23677:23680 Imp <> aexp ind
R23685:23688 Imp <> aexp ind
R23701:23701 Equiv <> a var
R23712:23715 Imp <> ANum constr
R23728:23731 Imp <> ANum constr
R23739:23741 Imp <> AId constr
R23755:23757 Imp <> AId constr
R23765:23769 Imp <> APlus constr
R23791:23791 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23814:23815 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23838:23838 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23792:23810 Equiv <> fold_constants_aexp def
R23816:23834 Equiv <> fold_constants_aexp def
R23855:23855 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23863:23864 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23872:23872 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23856:23859 Imp <> ANum constr
R23865:23868 Imp <> ANum constr
R23877:23880 Imp <> ANum constr
R23885:23887 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R23898:23898 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23902:23903 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23907:23907 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23912:23916 Imp <> APlus constr
R23938:23943 Imp <> AMinus constr
R23964:23964 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23987:23988 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24011:24011 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23965:23983 Equiv <> fold_constants_aexp def
R23989:24007 Equiv <> fold_constants_aexp def
R24028:24028 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24036:24037 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24045:24045 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24029:24032 Imp <> ANum constr
R24038:24041 Imp <> ANum constr
R24050:24053 Imp <> ANum constr
R24058:24060 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R24071:24071 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24075:24076 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24080:24080 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24085:24090 Imp <> AMinus constr
R24112:24116 Imp <> AMult constr
R24138:24138 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24161:24162 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24185:24185 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24139:24157 Equiv <> fold_constants_aexp def
R24163:24181 Equiv <> fold_constants_aexp def
R24202:24202 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24210:24211 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24219:24219 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24203:24206 Imp <> ANum constr
R24212:24215 Imp <> ANum constr
R24224:24227 Imp <> ANum constr
R24232:24234 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R24245:24245 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24249:24250 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24254:24254 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24259:24263 Imp <> AMult constr
def 24297:24309 <> fold_aexp_ex1
R24384:24388 Coq.Init.Logic <> :type_scope:x_'='_x not
R24317:24335 Equiv <> fold_constants_aexp def
R24344:24348 Imp <> AMult constr
R24377:24379 Imp <> AId constr
R24381:24381 Imp <> X def
R24351:24355 Imp <> APlus constr
R24367:24370 Imp <> ANum constr
R24358:24361 Imp <> ANum constr
R24389:24393 Imp <> AMult constr
R24405:24407 Imp <> AId constr
R24409:24409 Imp <> X def
R24396:24399 Imp <> ANum constr
def 24752:24764 <> fold_aexp_ex2
R24885:24889 Coq.Init.Logic <> :type_scope:x_'='_x not
R24772:24790 Equiv <> fold_constants_aexp def
R24799:24804 Imp <> AMinus constr
R24815:24819 Imp <> APlus constr
R24877:24879 Imp <> AId constr
R24881:24881 Imp <> Y def
R24822:24826 Imp <> AMult constr
R24838:24841 Imp <> ANum constr
R24829:24832 Imp <> ANum constr
R24807:24809 Imp <> AId constr
R24811:24811 Imp <> X def
R24890:24895 Imp <> AMinus constr
R24906:24910 Imp <> APlus constr
R24922:24924 Imp <> AId constr
R24926:24926 Imp <> Y def
R24913:24916 Imp <> ANum constr
R24898:24900 Imp <> AId constr
R24902:24902 Imp <> X def
def 25142:25160 <> fold_constants_bexp
R25167:25170 Imp <> bexp ind
R25175:25178 Imp <> bexp ind
R25191:25191 Equiv <> b var
R25202:25206 Imp <> BTrue constr
R25218:25222 Imp <> BTrue constr
R25228:25233 Imp <> BFalse constr
R25244:25249 Imp <> BFalse constr
R25255:25257 Imp <> BEq constr
R25279:25279 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25302:25303 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25326:25326 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25280:25298 Equiv <> fold_constants_aexp def
R25304:25322 Equiv <> fold_constants_aexp def
R25343:25343 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25351:25352 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25360:25360 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25344:25347 Imp <> ANum constr
R25353:25356 Imp <> ANum constr
R25376:25382 Coq.Arith.EqNat <> beq_nat def
R25406:25411 Imp <> BFalse constr
R25395:25399 Imp <> BTrue constr
R25419:25419 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25423:25424 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25428:25428 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25441:25443 Imp <> BEq constr
R25465:25467 Imp <> BLe constr
R25489:25489 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25512:25513 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25536:25536 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25490:25508 Equiv <> fold_constants_aexp def
R25514:25532 Equiv <> fold_constants_aexp def
R25553:25553 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25561:25562 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25570:25570 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25554:25557 Imp <> ANum constr
R25563:25566 Imp <> ANum constr
R25586:25588 Coq.Arith.Compare_dec <> leb def
R25612:25617 Imp <> BFalse constr
R25601:25605 Imp <> BTrue constr
R25625:25625 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25629:25630 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25634:25634 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25647:25649 Imp <> BLe constr
R25671:25674 Imp <> BNot constr
R25694:25712 Equiv <> fold_constants_bexp def
R25729:25733 Imp <> BTrue constr
R25738:25743 Imp <> BFalse constr
R25751:25756 Imp <> BFalse constr
R25761:25765 Imp <> BTrue constr
R25780:25783 Imp <> BNot constr
R25801:25804 Imp <> BAnd constr
R25826:25826 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25849:25850 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25873:25873 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25827:25845 Equiv <> fold_constants_bexp def
R25851:25869 Equiv <> fold_constants_bexp def
R25890:25890 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25896:25897 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25903:25903 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25891:25895 Imp <> BTrue constr
R25898:25902 Imp <> BTrue constr
R25908:25912 Imp <> BTrue constr
R25920:25920 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25926:25927 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25934:25934 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25921:25925 Imp <> BTrue constr
R25928:25933 Imp <> BFalse constr
R25939:25944 Imp <> BFalse constr
R25952:25952 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25959:25960 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25966:25966 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25953:25958 Imp <> BFalse constr
R25961:25965 Imp <> BTrue constr
R25971:25976 Imp <> BFalse constr
R25984:25984 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25991:25992 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25999:25999 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25985:25990 Imp <> BFalse constr
R25993:25998 Imp <> BFalse constr
R26004:26009 Imp <> BFalse constr
R26017:26017 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26021:26022 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26026:26026 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26031:26034 Imp <> BAnd constr
def 26068:26080 <> fold_bexp_ex1
R26147:26151 Coq.Init.Logic <> :type_scope:x_'='_x not
R26088:26106 Equiv <> fold_constants_bexp def
R26109:26112 Imp <> BAnd constr
R26121:26124 Imp <> BNot constr
R26127:26130 Imp <> BAnd constr
R26139:26143 Imp <> BTrue constr
R26132:26137 Imp <> BFalse constr
R26114:26118 Imp <> BTrue constr
R26152:26156 Imp <> BTrue constr
def 26193:26205 <> fold_bexp_ex2
R26396:26400 Coq.Init.Logic <> :type_scope:x_'='_x not
R26213:26231 Equiv <> fold_constants_bexp def
R26240:26243 Imp <> BAnd constr
R26280:26282 Imp <> BEq constr
R26311:26316 Imp <> AMinus constr
R26328:26332 Imp <> APlus constr
R26385:26388 Imp <> ANum constr
R26335:26338 Imp <> ANum constr
R26319:26322 Imp <> ANum constr
R26285:26288 Imp <> ANum constr
R26246:26248 Imp <> BEq constr
R26259:26261 Imp <> AId constr
R26263:26263 Imp <> Y def
R26251:26253 Imp <> AId constr
R26255:26255 Imp <> X def
R26401:26404 Imp <> BAnd constr
R26428:26432 Imp <> BTrue constr
R26407:26409 Imp <> BEq constr
R26420:26422 Imp <> AId constr
R26424:26424 Imp <> Y def
R26412:26414 Imp <> AId constr
R26416:26416 Imp <> X def
def 26586:26603 <> fold_constants_com
R26610:26612 Imp <> com ind
R26617:26619 Imp <> com ind
R26632:26632 Equiv <> c var
R26643:26646 Imp <> ::'SKIP' not
R26662:26665 Imp <> ::'SKIP' not
R26672:26676 Imp <> ::x_'::='_x not
R26689:26692 Imp <> CAss constr
R26697:26715 Equiv <> fold_constants_aexp def
R26726:26729 Imp <> ::x_';;'_x not
R26743:26743 Imp <> ::x_';;'_x not
R26765:26770 Imp <> ::x_';;'_x not
R26792:26792 Imp <> ::x_';;'_x not
R26744:26761 Equiv <> fold_constants_com def
R26771:26788 Equiv <> fold_constants_com def
R26798:26801 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26803:26808 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26811:26816 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26819:26821 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26838:26856 Equiv <> fold_constants_bexp def
R26873:26877 Imp <> BTrue constr
R26882:26899 Equiv <> fold_constants_com def
R26912:26917 Imp <> BFalse constr
R26922:26939 Equiv <> fold_constants_com def
R26958:26961 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26964:26969 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26991:27017 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27039:27041 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26970:26987 Equiv <> fold_constants_com def
R27018:27035 Equiv <> fold_constants_com def
R27057:27062 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27064:27067 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27069:27072 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27089:27107 Equiv <> fold_constants_bexp def
R27124:27128 Imp <> BTrue constr
R27133:27138 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27144:27147 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27152:27155 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27139:27143 Imp <> BTrue constr
R27148:27151 Imp <> ::'SKIP' not
R27165:27170 Imp <> BFalse constr
R27175:27178 Imp <> ::'SKIP' not
R27194:27199 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27202:27206 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27227:27231 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27207:27224 Equiv <> fold_constants_com def
R27226:27226 Equiv <> c var
def 27259:27270 <> fold_com_ex1
R27753:27792 Coq.Init.Logic <> :type_scope:x_'='_x not
R28050:28050 Coq.Init.Logic <> :type_scope:x_'='_x not
R27276:27293 Equiv <> fold_constants_com def
R27357:27364 Imp <> ::x_';;'_x not
R27329:27333 Imp <> ::x_'::='_x not
R27328:27328 Imp <> X def
R27334:27338 Imp <> APlus constr
R27350:27353 Imp <> ANum constr
R27341:27344 Imp <> ANum constr
R27394:27401 Imp <> ::x_';;'_x not
R27366:27370 Imp <> ::x_'::='_x not
R27365:27365 Imp <> Y def
R27371:27376 Imp <> AMinus constr
R27387:27390 Imp <> ANum constr
R27379:27381 Imp <> AId constr
R27383:27383 Imp <> X def
R27528:27535 Imp <> ::x_';;'_x not
R27402:27405 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27473:27485 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27490:27507 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27520:27527 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27406:27408 Imp <> BEq constr
R27449:27453 Imp <> APlus constr
R27465:27468 Imp <> ANum constr
R27456:27459 Imp <> ANum constr
R27411:27416 Imp <> AMinus constr
R27427:27429 Imp <> AId constr
R27431:27431 Imp <> Y def
R27419:27421 Imp <> AId constr
R27423:27423 Imp <> X def
R27486:27489 Imp <> ::'SKIP' not
R27509:27513 Imp <> ::x_'::='_x not
R27508:27508 Imp <> Y def
R27514:27517 Imp <> ANum constr
R27670:27677 Imp <> ::x_';;'_x not
R27536:27539 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27609:27627 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27640:27657 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27662:27669 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27540:27542 Imp <> BLe constr
R27567:27572 Imp <> AMinus constr
R27584:27588 Imp <> APlus constr
R27600:27603 Imp <> ANum constr
R27591:27594 Imp <> ANum constr
R27575:27578 Imp <> ANum constr
R27545:27548 Imp <> ANum constr
R27629:27633 Imp <> ::x_'::='_x not
R27628:27628 Imp <> Y def
R27634:27637 Imp <> ANum constr
R27658:27661 Imp <> ::'SKIP' not
R27678:27683 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27704:27714 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27743:27751 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27684:27686 Imp <> BEq constr
R27697:27700 Imp <> ANum constr
R27689:27691 Imp <> AId constr
R27693:27693 Imp <> Y def
R27716:27720 Imp <> ::x_'::='_x not
R27715:27715 Imp <> X def
R27721:27725 Imp <> APlus constr
R27736:27739 Imp <> ANum constr
R27728:27730 Imp <> AId constr
R27732:27732 Imp <> X def
R27805:27812 Imp <> ::x_';;'_x not
R27794:27798 Imp <> ::x_'::='_x not
R27793:27793 Imp <> X def
R27799:27802 Imp <> ANum constr
R27842:27849 Imp <> ::x_';;'_x not
R27814:27818 Imp <> ::x_'::='_x not
R27813:27813 Imp <> Y def
R27819:27824 Imp <> AMinus constr
R27835:27838 Imp <> ANum constr
R27827:27829 Imp <> AId constr
R27831:27831 Imp <> X def
R27948:27955 Imp <> ::x_';;'_x not
R27850:27853 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27891:27903 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27908:27926 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27939:27947 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27854:27856 Imp <> BEq constr
R27884:27887 Imp <> ANum constr
R27859:27864 Imp <> AMinus constr
R27875:27877 Imp <> AId constr
R27879:27879 Imp <> Y def
R27867:27869 Imp <> AId constr
R27871:27871 Imp <> X def
R27904:27907 Imp <> ::'SKIP' not
R27928:27932 Imp <> ::x_'::='_x not
R27927:27927 Imp <> Y def
R27933:27936 Imp <> ANum constr
R27968:27975 Imp <> ::x_';;'_x not
R27957:27961 Imp <> ::x_'::='_x not
R27956:27956 Imp <> Y def
R27962:27965 Imp <> ANum constr
R27976:27981 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28002:28012 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28041:28049 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27982:27984 Imp <> BEq constr
R27995:27998 Imp <> ANum constr
R27987:27989 Imp <> AId constr
R27991:27991 Imp <> Y def
R28014:28018 Imp <> ::x_'::='_x not
R28013:28013 Imp <> X def
R28019:28023 Imp <> APlus constr
R28034:28037 Imp <> ANum constr
R28026:28028 Imp <> AId constr
R28030:28030 Imp <> X def
prf 28300:28324 <> fold_constants_aexp_sound
R28330:28341 Equiv <> atrans_sound def
R28343:28361 Equiv <> fold_constants_aexp def
R28380:28391 Equiv <> atrans_sound def
R28411:28416 Equiv <> aequiv def
R28825:28843 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28825:28843 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28825:28843 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28825:28843 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
R28869:28887 Equiv <> fold_constants_aexp def
prf 31809:31833 <> fold_constants_bexp_sound
R31838:31849 Equiv <> btrans_sound def
R31851:31869 Equiv <> fold_constants_bexp def
R31888:31899 Equiv <> btrans_sound def
R31919:31924 Equiv <> bequiv def
R32423:32441 Equiv <> fold_constants_aexp def
R32423:32441 Equiv <> fold_constants_aexp def
R32480:32498 Equiv <> fold_constants_aexp def
R32480:32498 Equiv <> fold_constants_aexp def
R32536:32540 Imp <> aeval def
R32555:32559 Imp <> aeval def
R32602:32626 Equiv <> fold_constants_aexp_sound thm
R32555:32559 Imp <> aeval def
R32536:32540 Imp <> aeval def
R32602:32626 Equiv <> fold_constants_aexp_sound thm
R32656:32660 Imp <> aeval def
R32675:32679 Imp <> aeval def
R32722:32746 Equiv <> fold_constants_aexp_sound thm
R32675:32679 Imp <> aeval def
R32656:32660 Imp <> aeval def
R32722:32746 Equiv <> fold_constants_aexp_sound thm
R32940:32946 Coq.Arith.EqNat <> beq_nat def
R32940:32946 Coq.Arith.EqNat <> beq_nat def
R33048:33066 Equiv <> fold_constants_bexp def
R33048:33066 Equiv <> fold_constants_bexp def
R33175:33193 Equiv <> fold_constants_bexp def
R33175:33193 Equiv <> fold_constants_bexp def
R33232:33250 Equiv <> fold_constants_bexp def
R33232:33250 Equiv <> fold_constants_bexp def
prf 33516:33539 <> fold_constants_com_sound
R33545:33556 Equiv <> ctrans_sound def
R33558:33575 Equiv <> fold_constants_com def
R33594:33605 Equiv <> ctrans_sound def
R33661:33671 Equiv <> refl_cequiv thm
R33661:33671 Equiv <> refl_cequiv thm
R33694:33708 Equiv <> CAss_congruence thm
R33694:33708 Equiv <> CAss_congruence thm
R33731:33755 Equiv <> fold_constants_aexp_sound thm
R33731:33755 Equiv <> fold_constants_aexp_sound thm
R33777:33791 Equiv <> CSeq_congruence prfax
R33777:33791 Equiv <> CSeq_congruence prfax
R33832:33837 Equiv <> bequiv def
R33842:33860 Equiv <> fold_constants_bexp def
R33832:33837 Equiv <> bequiv def
R33842:33860 Equiv <> fold_constants_bexp def
R33881:33905 Equiv <> fold_constants_bexp_sound prfax
R33881:33905 Equiv <> fold_constants_bexp_sound prfax
R33924:33942 Equiv <> fold_constants_bexp def
R33974:33987 Equiv <> CIf_congruence prfax
R33924:33942 Equiv <> fold_constants_bexp def
R33974:33987 Equiv <> CIf_congruence prfax
R33974:33987 Equiv <> CIf_congruence prfax
R33974:33987 Equiv <> CIf_congruence prfax
R33974:33987 Equiv <> CIf_congruence prfax
R33974:33987 Equiv <> CIf_congruence prfax
R33974:33987 Equiv <> CIf_congruence prfax
R34202:34213 Equiv <> trans_cequiv thm
R34202:34213 Equiv <> trans_cequiv thm
R34252:34259 Equiv <> IFB_true thm
R34252:34259 Equiv <> IFB_true thm
R34313:34324 Equiv <> trans_cequiv thm
R34313:34324 Equiv <> trans_cequiv thm
R34363:34371 Equiv <> IFB_false prfax
R34363:34371 Equiv <> IFB_false prfax
def 36809:36818 <> subst_aexp
R36825:36826 Maps <> id ind
R36834:36837 Imp <> aexp ind
R36845:36848 Imp <> aexp ind
R36853:36856 Imp <> aexp ind
R36869:36869 Equiv <> a var
R36880:36883 Imp <> ANum constr
R36902:36905 Imp <> ANum constr
R36913:36915 Imp <> AId constr
R36938:36943 Maps <> beq_id def
R36945:36945 Equiv <> i var
R36962:36964 Imp <> AId constr
R36955:36955 Equiv <> u var
R36973:36977 Imp <> APlus constr
R36995:36999 Imp <> APlus constr
R37022:37031 Equiv <> subst_aexp def
R37035:37035 Equiv <> u var
R37033:37033 Equiv <> i var
R37002:37011 Equiv <> subst_aexp def
R37015:37015 Equiv <> u var
R37013:37013 Equiv <> i var
R37045:37050 Imp <> AMinus constr
R37067:37072 Imp <> AMinus constr
R37095:37104 Equiv <> subst_aexp def
R37108:37108 Equiv <> u var
R37106:37106 Equiv <> i var
R37075:37084 Equiv <> subst_aexp def
R37088:37088 Equiv <> u var
R37086:37086 Equiv <> i var
R37118:37122 Imp <> AMult constr
R37140:37144 Imp <> AMult constr
R37167:37176 Equiv <> subst_aexp def
R37180:37180 Equiv <> u var
R37178:37178 Equiv <> i var
R37147:37156 Equiv <> subst_aexp def
R37160:37160 Equiv <> u var
R37158:37158 Equiv <> i var
def 37202:37214 <> subst_aexp_ex
R37297:37301 Coq.Init.Logic <> :type_scope:x_'='_x not
R37343:37343 Coq.Init.Logic <> :type_scope:x_'='_x not
R37220:37229 Equiv <> subst_aexp def
R37275:37279 Imp <> APlus constr
R37290:37292 Imp <> AId constr
R37294:37294 Imp <> X def
R37282:37284 Imp <> AId constr
R37286:37286 Imp <> Y def
R37234:37238 Imp <> APlus constr
R37251:37254 Imp <> ANum constr
R37241:37244 Imp <> ANum constr
R37231:37231 Imp <> X def
R37302:37306 Imp <> APlus constr
R37317:37321 Imp <> APlus constr
R37334:37337 Imp <> ANum constr
R37324:37327 Imp <> ANum constr
R37309:37311 Imp <> AId constr
R37313:37313 Imp <> Y def
def 37539:37558 <> subst_equiv_property
R37585:37590 Equiv <> cequiv def
R37635:37637 Imp <> ::x_';;'_x not
R37628:37632 Imp <> ::x_'::='_x not
R37626:37627 Equiv <> i1 var
R37633:37634 Equiv <> a1 var
R37640:37644 Imp <> ::x_'::='_x not
R37638:37639 Equiv <> i2 var
R37645:37654 Equiv <> subst_aexp def
R37662:37663 Equiv <> a2 var
R37659:37660 Equiv <> a1 var
R37656:37657 Equiv <> i1 var
R37602:37604 Imp <> ::x_';;'_x not
R37595:37599 Imp <> ::x_'::='_x not
R37593:37594 Equiv <> i1 var
R37600:37601 Equiv <> a1 var
R37607:37611 Imp <> ::x_'::='_x not
R37605:37606 Equiv <> i2 var
R37612:37613 Equiv <> a2 var
prf 38901:38913 <> subst_inequiv
R38919:38920 Coq.Init.Logic <> :type_scope:'~'_x not
R38921:38940 Equiv <> subst_equiv_property def
R38959:38978 Equiv <> subst_equiv_property def
R39189:39203 Imp <> ::x_';;'_x not
R39162:39166 Imp <> ::x_'::='_x not
R39161:39161 Imp <> X def
R39167:39171 Imp <> APlus constr
R39182:39185 Imp <> ANum constr
R39174:39176 Imp <> AId constr
R39178:39178 Imp <> X def
R39205:39209 Imp <> ::x_'::='_x not
R39204:39204 Imp <> Y def
R39210:39212 Imp <> AId constr
R39214:39214 Imp <> X def
R39189:39203 Imp <> ::x_';;'_x not
R39162:39166 Imp <> ::x_'::='_x not
R39161:39161 Imp <> X def
R39167:39171 Imp <> APlus constr
R39182:39185 Imp <> ANum constr
R39174:39176 Imp <> AId constr
R39178:39178 Imp <> X def
R39205:39209 Imp <> ::x_'::='_x not
R39204:39204 Imp <> Y def
R39210:39212 Imp <> AId constr
R39214:39214 Imp <> X def
R39270:39284 Imp <> ::x_';;'_x not
R39243:39247 Imp <> ::x_'::='_x not
R39242:39242 Imp <> X def
R39248:39252 Imp <> APlus constr
R39263:39266 Imp <> ANum constr
R39255:39257 Imp <> AId constr
R39259:39259 Imp <> X def
R39286:39290 Imp <> ::x_'::='_x not
R39285:39285 Imp <> Y def
R39291:39295 Imp <> APlus constr
R39306:39309 Imp <> ANum constr
R39298:39300 Imp <> AId constr
R39302:39302 Imp <> X def
R39270:39284 Imp <> ::x_';;'_x not
R39243:39247 Imp <> ::x_'::='_x not
R39242:39242 Imp <> X def
R39248:39252 Imp <> APlus constr
R39263:39266 Imp <> ANum constr
R39255:39257 Imp <> AId constr
R39259:39259 Imp <> X def
R39286:39290 Imp <> ::x_'::='_x not
R39285:39285 Imp <> Y def
R39291:39295 Imp <> APlus constr
R39306:39309 Imp <> ANum constr
R39298:39300 Imp <> AId constr
R39302:39302 Imp <> X def
R39338:39343 Equiv <> cequiv def
R39338:39343 Equiv <> cequiv def
R39560:39567 Maps <> t_update def
R39596:39596 Imp <> Y def
R39570:39577 Maps <> t_update def
R39591:39591 Imp <> X def
R39579:39589 Imp <> empty_state def
R39560:39567 Maps <> t_update def
R39596:39596 Imp <> Y def
R39570:39577 Maps <> t_update def
R39591:39591 Imp <> X def
R39579:39589 Imp <> empty_state def
R39621:39628 Maps <> t_update def
R39657:39657 Imp <> Y def
R39631:39638 Maps <> t_update def
R39652:39652 Imp <> X def
R39640:39650 Imp <> empty_state def
R39621:39628 Maps <> t_update def
R39657:39657 Imp <> Y def
R39631:39638 Maps <> t_update def
R39652:39652 Imp <> X def
R39640:39650 Imp <> empty_state def
R39686:39688 Imp <> ::x_'/'_x_'\\'_x not
R39700:39703 Imp <> ::x_'/'_x_'\\'_x not
R39689:39699 Imp <> empty_state def
R39726:39728 Imp <> ::x_'/'_x_'\\'_x not
R39740:39743 Imp <> ::x_'/'_x_'\\'_x not
R39729:39739 Imp <> empty_state def
R39797:39804 Maps <> t_update def
R39818:39818 Imp <> X def
R39806:39816 Imp <> empty_state def
R39777:39781 Imp <> E_Seq constr
R39838:39842 Imp <> E_Ass constr
R39686:39688 Imp <> ::x_'/'_x_'\\'_x not
R39700:39703 Imp <> ::x_'/'_x_'\\'_x not
R39689:39699 Imp <> empty_state def
R39726:39728 Imp <> ::x_'/'_x_'\\'_x not
R39740:39743 Imp <> ::x_'/'_x_'\\'_x not
R39729:39739 Imp <> empty_state def
R39726:39728 Imp <> ::x_'/'_x_'\\'_x not
R39740:39743 Imp <> ::x_'/'_x_'\\'_x not
R39729:39739 Imp <> empty_state def
R39797:39804 Maps <> t_update def
R39818:39818 Imp <> X def
R39806:39816 Imp <> empty_state def
R39777:39781 Imp <> E_Seq constr
R39838:39842 Imp <> E_Ass constr
R39838:39842 Imp <> E_Ass constr
R39797:39804 Maps <> t_update def
R39818:39818 Imp <> X def
R39806:39816 Imp <> empty_state def
R39777:39781 Imp <> E_Seq constr
R39838:39842 Imp <> E_Ass constr
R39838:39842 Imp <> E_Ass constr
R39797:39804 Maps <> t_update def
R39818:39818 Imp <> X def
R39806:39816 Imp <> empty_state def
R39777:39781 Imp <> E_Seq constr
R39838:39842 Imp <> E_Ass constr
R39838:39842 Imp <> E_Ass constr
R39797:39804 Maps <> t_update def
R39818:39818 Imp <> X def
R39806:39816 Imp <> empty_state def
R39777:39781 Imp <> E_Seq constr
R39997:39999 Coq.Init.Logic <> :type_scope:x_'='_x not
R40020:40038 Imp <> ceval_deterministic thm
R40043:40053 Imp <> empty_state def
R39997:39999 Coq.Init.Logic <> :type_scope:x_'='_x not
R40020:40038 Imp <> ceval_deterministic thm
R40043:40053 Imp <> empty_state def
R40095:40097 Coq.Init.Logic <> :type_scope:x_'='_x not
R40094:40094 Imp <> Y def
R40102:40102 Imp <> Y def
R40095:40097 Coq.Init.Logic <> :type_scope:x_'='_x not
R40094:40094 Imp <> Y def
R40102:40102 Imp <> Y def
ind 40510:40529 <> var_not_used_in_aexp
constr 40560:40565 <> VNUNum
constr 40614:40618 <> VNUId
constr 40676:40682 <> VNUPlus
constr 40816:40823 <> VNUMinus
constr 40958:40964 <> VNUMult
R40534:40535 Maps <> id ind
R40540:40543 Imp <> aexp ind
R40578:40597 Equiv <> var_not_used_in_aexp ind
R40602:40605 Imp <> ANum constr
R40607:40607 Equiv <> n var
R40641:40660 Equiv <> var_not_used_in_aexp ind
R40665:40667 Imp <> AId constr
R40669:40669 Equiv <> Y var
R40632:40635 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R40636:40636 Equiv <> Y var
R40775:40794 Equiv <> var_not_used_in_aexp ind
R40799:40803 Imp <> APlus constr
R40808:40809 Equiv <> a2 var
R40805:40806 Equiv <> a1 var
R40740:40759 Equiv <> var_not_used_in_aexp ind
R40763:40764 Equiv <> a2 var
R40705:40724 Equiv <> var_not_used_in_aexp ind
R40728:40729 Equiv <> a1 var
R40916:40935 Equiv <> var_not_used_in_aexp ind
R40940:40945 Imp <> AMinus constr
R40950:40951 Equiv <> a2 var
R40947:40948 Equiv <> a1 var
R40881:40900 Equiv <> var_not_used_in_aexp ind
R40904:40905 Equiv <> a2 var
R40846:40865 Equiv <> var_not_used_in_aexp ind
R40869:40870 Equiv <> a1 var
R41057:41076 Equiv <> var_not_used_in_aexp ind
R41081:41085 Imp <> AMult constr
R41090:41091 Equiv <> a2 var
R41087:41088 Equiv <> a1 var
R41022:41041 Equiv <> var_not_used_in_aexp ind
R41045:41046 Equiv <> a2 var
R40987:41006 Equiv <> var_not_used_in_aexp ind
R41010:41011 Equiv <> a1 var
prf 41102:41116 <> aeval_weakening
R41196:41198 Coq.Init.Logic <> :type_scope:x_'='_x not
R41170:41174 Imp <> aeval def
R41195:41195 Equiv <> a var
R41177:41184 Maps <> t_update def
R41191:41192 Equiv <> ni var
R41189:41189 Equiv <> i var
R41186:41187 Equiv <> st var
R41199:41203 Imp <> aeval def
R41208:41208 Equiv <> a var
R41205:41206 Equiv <> st var
R41140:41159 Equiv <> var_not_used_in_aexp ind
R41163:41163 Equiv <> a var
R41161:41161 Equiv <> i var
prf 41518:41533 <> inequiv_exercise
R41538:41539 Coq.Init.Logic <> :type_scope:'~'_x not
R41540:41545 Equiv <> cequiv def
R41573:41576 Imp <> ::'SKIP' not
R41548:41553 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R41559:41562 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R41567:41570 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R41554:41558 Imp <> BTrue constr
R41563:41566 Imp <> ::'SKIP' not
mod 43608:43611 <> Himp
ind 43709:43711 Himp com
constr 43727:43731 Himp CSkip
constr 43743:43746 Himp CAss
constr 43772:43775 Himp CSeq
constr 43801:43803 Himp CIf
constr 43837:43842 Himp CWhile
constr 43869:43874 Himp CHavoc
R43735:43737 Equiv <> com ind
R43764:43766 Equiv <> com ind
R43756:43759 Imp <> aexp ind
R43750:43751 Maps <> id ind
R43793:43795 Equiv <> com ind
R43786:43788 Equiv <> com ind
R43779:43781 Equiv <> com ind
R43829:43831 Equiv <> com ind
R43822:43824 Equiv <> com ind
R43815:43817 Equiv <> com ind
R43807:43810 Imp <> bexp ind
R43861:43863 Equiv <> com ind
R43854:43856 Equiv <> com ind
R43846:43849 Imp <> bexp ind
R43884:43886 Equiv <> com ind
R43878:43879 Maps <> id ind
R43944:43948 Equiv Himp CSkip constr
not 43930 Himp ::'SKIP'
R43978:43981 Equiv Himp CAss constr
not 43960 Himp ::x_'::='_x
R44029:44032 Equiv Himp CSeq constr
not 44012 Himp ::x_';;'_x
R44117:44122 Equiv Himp CWhile constr
not 44086 Himp ::'WHILE'_x_'DO'_x_'END'
R44216:44218 Equiv Himp CIf constr
not 44174 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R44291:44296 Equiv Himp CHavoc constr
not 44275 Himp ::'HAVOC'_x
ind 44725:44729 Himp ceval
constr 44770:44775 Himp E_Skip
constr 44818:44822 Himp E_Ass
constr 44948:44952 Himp E_Seq
constr 45084:45091 Himp E_IfTrue
constr 45248:45256 Himp E_IfFalse
constr 45414:45423 Himp E_WhileEnd
constr 45543:45553 Himp E_WhileLoop
R44749:44753 Imp <> state def
R44740:44744 Imp <> state def
R44733:44735 Equiv Himp com ind
R45799:45803 Equiv <> ceval ind
R44791:44795 Imp <> state def
R44802:44804 Equiv Himp ::x_'/'_x_'\\'_x not
R44807:44810 Equiv Himp ::x_'/'_x_'\\'_x not
R44798:44801 Equiv Himp ::'SKIP' not
R44805:44806 Equiv <> st var
R44811:44812 Equiv <> st var
R44839:44843 Imp <> state def
R44852:44855 Imp <> aexp ind
R44863:44865 Coq.Init.Datatypes <> nat ind
R44873:44874 Maps <> id ind
R44909:44909 Equiv Himp ::x_'/'_x_'\\'_x not
R44918:44921 Equiv Himp ::x_'/'_x_'\\'_x not
R44924:44927 Equiv Himp ::x_'/'_x_'\\'_x not
R44911:44915 Equiv Himp ::x_'::='_x not
R44910:44910 Equiv <> X var
R44916:44917 Equiv <> a1 var
R44922:44923 Equiv <> st var
R44928:44935 Maps <> t_update def
R44942:44942 Equiv <> n var
R44940:44940 Equiv <> X var
R44937:44938 Equiv <> st var
R44895:44897 Coq.Init.Logic <> :type_scope:x_'='_x not
R44884:44888 Imp <> aeval def
R44893:44894 Equiv <> a1 var
R44890:44891 Equiv <> st var
R44898:44898 Equiv <> n var
R44972:44974 Equiv Himp com ind
R44992:44996 Imp <> state def
R45056:45056 Equiv Himp ::x_'/'_x_'\\'_x not
R45065:45068 Equiv Himp ::x_'/'_x_'\\'_x not
R45071:45074 Equiv Himp ::x_'/'_x_'\\'_x not
R45059:45062 Equiv Himp ::x_';;'_x not
R45057:45058 Equiv <> c1 var
R45063:45064 Equiv <> c2 var
R45069:45070 Equiv <> st var
R45075:45078 Equiv <> st'' var
R45032:45034 Equiv Himp ::x_'/'_x_'\\'_x not
R45038:45041 Equiv Himp ::x_'/'_x_'\\'_x not
R45030:45031 Equiv <> c2 var
R45035:45037 Equiv <> st' var
R45042:45045 Equiv <> st'' var
R45008:45010 Equiv Himp ::x_'/'_x_'\\'_x not
R45013:45016 Equiv Himp ::x_'/'_x_'\\'_x not
R45006:45007 Equiv <> c1 var
R45011:45012 Equiv <> st var
R45017:45019 Equiv <> st' var
R45112:45116 Imp <> state def
R45125:45128 Imp <> bexp ind
R45140:45142 Equiv Himp com ind
R45204:45204 Equiv Himp ::x_'/'_x_'\\'_x not
R45230:45233 Equiv Himp ::x_'/'_x_'\\'_x not
R45236:45239 Equiv Himp ::x_'/'_x_'\\'_x not
R45205:45208 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45211:45216 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45219:45224 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45227:45229 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45209:45210 Equiv <> b1 var
R45217:45218 Equiv <> c1 var
R45225:45226 Equiv <> c2 var
R45234:45235 Equiv <> st var
R45240:45242 Equiv <> st' var
R45182:45184 Equiv Himp ::x_'/'_x_'\\'_x not
R45187:45190 Equiv Himp ::x_'/'_x_'\\'_x not
R45180:45181 Equiv <> c1 var
R45185:45186 Equiv <> st var
R45191:45193 Equiv <> st' var
R45163:45165 Coq.Init.Logic <> :type_scope:x_'='_x not
R45152:45156 Imp <> beval def
R45161:45162 Equiv <> b1 var
R45158:45159 Equiv <> st var
R45166:45169 Coq.Init.Datatypes <> true constr
R45277:45281 Imp <> state def
R45290:45293 Imp <> bexp ind
R45305:45307 Equiv Himp com ind
R45370:45370 Equiv Himp ::x_'/'_x_'\\'_x not
R45396:45399 Equiv Himp ::x_'/'_x_'\\'_x not
R45402:45405 Equiv Himp ::x_'/'_x_'\\'_x not
R45371:45374 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45377:45382 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45385:45390 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45393:45395 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45375:45376 Equiv <> b1 var
R45383:45384 Equiv <> c1 var
R45391:45392 Equiv <> c2 var
R45400:45401 Equiv <> st var
R45406:45408 Equiv <> st' var
R45348:45350 Equiv Himp ::x_'/'_x_'\\'_x not
R45353:45356 Equiv Himp ::x_'/'_x_'\\'_x not
R45346:45347 Equiv <> c2 var
R45351:45352 Equiv <> st var
R45357:45359 Equiv <> st' var
R45328:45330 Coq.Init.Logic <> :type_scope:x_'='_x not
R45317:45321 Imp <> beval def
R45326:45327 Equiv <> b1 var
R45323:45324 Equiv <> st var
R45331:45335 Coq.Init.Datatypes <> false constr
R45440:45443 Imp <> bexp ind
R45452:45456 Imp <> state def
R45465:45467 Equiv Himp com ind
R45507:45507 Equiv Himp ::x_'/'_x_'\\'_x not
R45526:45529 Equiv Himp ::x_'/'_x_'\\'_x not
R45532:45535 Equiv Himp ::x_'/'_x_'\\'_x not
R45508:45513 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45516:45519 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45522:45525 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45514:45515 Equiv <> b1 var
R45520:45521 Equiv <> c1 var
R45530:45531 Equiv <> st var
R45536:45537 Equiv <> st var
R45488:45490 Coq.Init.Logic <> :type_scope:x_'='_x not
R45477:45481 Imp <> beval def
R45486:45487 Equiv <> b1 var
R45483:45484 Equiv <> st var
R45491:45495 Coq.Init.Datatypes <> false constr
R45579:45583 Imp <> state def
R45592:45595 Imp <> bexp ind
R45604:45606 Equiv Himp com ind
R45712:45712 Equiv Himp ::x_'/'_x_'\\'_x not
R45731:45734 Equiv Himp ::x_'/'_x_'\\'_x not
R45737:45740 Equiv Himp ::x_'/'_x_'\\'_x not
R45713:45718 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45721:45724 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45727:45730 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45719:45720 Equiv <> b1 var
R45725:45726 Equiv <> c1 var
R45735:45736 Equiv <> st var
R45741:45744 Equiv <> st'' var
R45668:45668 Equiv Himp ::x_'/'_x_'\\'_x not
R45687:45690 Equiv Himp ::x_'/'_x_'\\'_x not
R45694:45697 Equiv Himp ::x_'/'_x_'\\'_x not
R45669:45674 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45677:45680 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45683:45686 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R45675:45676 Equiv <> b1 var
R45681:45682 Equiv <> c1 var
R45691:45693 Equiv <> st' var
R45698:45701 Equiv <> st'' var
R45646:45648 Equiv Himp ::x_'/'_x_'\\'_x not
R45651:45654 Equiv Himp ::x_'/'_x_'\\'_x not
R45644:45645 Equiv <> c1 var
R45649:45650 Equiv <> st var
R45655:45657 Equiv <> st' var
R45627:45629 Coq.Init.Logic <> :type_scope:x_'='_x not
R45616:45620 Imp <> beval def
R45625:45626 Equiv <> b1 var
R45622:45623 Equiv <> st var
R45630:45633 Coq.Init.Datatypes <> true constr
R45799:45803 Equiv Himp ceval ind
not 45774 Himp ::x_'/'_x_'\\'_x
def 45918:45931 Himp havoc_example1
R45935:45935 Equiv Himp ::x_'/'_x_'\\'_x not
R45943:45946 Equiv Himp ::x_'/'_x_'\\'_x not
R45958:45961 Equiv Himp ::x_'/'_x_'\\'_x not
R45936:45941 Equiv Himp ::'HAVOC'_x not
R45942:45942 Imp <> X def
R45947:45957 Imp <> empty_state def
R45962:45969 Maps <> t_update def
R45983:45983 Imp <> X def
R45971:45981 Imp <> empty_state def
def 46033:46046 Himp havoc_example2
R46052:46052 Equiv Himp ::x_'/'_x_'\\'_x not
R46067:46070 Equiv Himp ::x_'/'_x_'\\'_x not
R46082:46085 Equiv Himp ::x_'/'_x_'\\'_x not
R46057:46059 Equiv Himp ::x_';;'_x not
R46053:46056 Equiv Himp ::'SKIP' not
R46060:46065 Equiv Himp ::'HAVOC'_x not
R46066:46066 Imp <> Z def
R46071:46081 Imp <> empty_state def
R46086:46093 Maps <> t_update def
R46107:46107 Imp <> Z def
R46095:46105 Imp <> empty_state def
def 46248:46253 Himp cequiv
R46264:46266 Equiv Himp com ind
R46295:46299 Imp <> state def
R46318:46322 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R46306:46308 Equiv Himp ::x_'/'_x_'\\'_x not
R46311:46314 Equiv Himp ::x_'/'_x_'\\'_x not
R46304:46305 Equiv <> c1 var
R46309:46310 Equiv <> st var
R46315:46317 Equiv <> st' var
R46325:46327 Equiv Himp ::x_'/'_x_'\\'_x not
R46330:46333 Equiv Himp ::x_'/'_x_'\\'_x not
R46323:46324 Equiv <> c2 var
R46328:46329 Equiv <> st var
R46334:46336 Equiv <> st' var
def 46553:46555 Himp pXY
R46569:46571 Equiv Himp ::x_';;'_x not
R46562:46567 Equiv Himp ::'HAVOC'_x not
R46568:46568 Imp <> X def
R46572:46577 Equiv Himp ::'HAVOC'_x not
R46578:46578 Imp <> Y def
def 46593:46595 Himp pYX
R46609:46611 Equiv Himp ::x_';;'_x not
R46602:46607 Equiv Himp ::'HAVOC'_x not
R46608:46608 Imp <> Y def
R46612:46617 Equiv Himp ::'HAVOC'_x not
R46618:46618 Imp <> X def
prf 46726:46739 Himp pXY_cequiv_pYX
R46759:46762 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R46745:46750 Equiv Himp cequiv def
R46756:46758 Equiv Himp pYX def
R46752:46754 Equiv Himp pXY def
R46763:46763 Coq.Init.Logic <> :type_scope:'~'_x not
R46764:46769 Equiv Himp cequiv def
R46775:46777 Equiv Himp pYX def
R46771:46773 Equiv Himp pXY def
def 46943:46948 Himp ptwice
R46962:46964 Equiv Himp ::x_';;'_x not
R46955:46960 Equiv Himp ::'HAVOC'_x not
R46961:46961 Imp <> X def
R46965:46970 Equiv Himp ::'HAVOC'_x not
R46971:46971 Imp <> Y def
def 46986:46990 Himp pcopy
R47004:47006 Equiv Himp ::x_';;'_x not
R46997:47002 Equiv Himp ::'HAVOC'_x not
R47003:47003 Imp <> X def
R47008:47012 Equiv Himp ::x_'::='_x not
R47007:47007 Imp <> Y def
R47013:47015 Imp <> AId constr
R47017:47017 Imp <> X def
prf 47188:47206 Himp ptwice_cequiv_pcopy
R47231:47234 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R47212:47217 Equiv Himp cequiv def
R47226:47230 Equiv Himp pcopy def
R47219:47224 Equiv Himp ptwice def
R47235:47235 Coq.Init.Logic <> :type_scope:'~'_x not
R47236:47241 Equiv Himp cequiv def
R47250:47254 Equiv Himp pcopy def
R47243:47248 Equiv Himp ptwice def
def 48100:48101 Himp p1
R48105:48107 Equiv Himp com ind
R48114:48120 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48148:48156 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48199:48204 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48121:48124 Imp <> BNot constr
R48127:48129 Imp <> BEq constr
R48140:48143 Imp <> ANum constr
R48132:48134 Imp <> AId constr
R48136:48136 Imp <> X def
R48164:48170 Equiv Himp ::x_';;'_x not
R48157:48162 Equiv Himp ::'HAVOC'_x not
R48163:48163 Imp <> Y def
R48172:48176 Equiv Himp ::x_'::='_x not
R48171:48171 Imp <> X def
R48177:48181 Imp <> APlus constr
R48192:48195 Imp <> ANum constr
R48184:48186 Imp <> AId constr
R48188:48188 Imp <> X def
def 48219:48220 Himp p2
R48224:48226 Equiv Himp com ind
R48233:48239 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48267:48275 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48280:48285 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48240:48243 Imp <> BNot constr
R48246:48248 Imp <> BEq constr
R48259:48262 Imp <> ANum constr
R48251:48253 Imp <> AId constr
R48255:48255 Imp <> X def
R48276:48279 Equiv Himp ::'SKIP' not
prf 48546:48559 Himp p1_may_diverge
R48593:48594 Coq.Init.Logic <> :type_scope:'~'_x not
R48597:48599 Equiv Himp ::x_'/'_x_'\\'_x not
R48602:48605 Equiv Himp ::x_'/'_x_'\\'_x not
R48595:48596 Equiv Himp p1 def
R48600:48601 Equiv <> st var
R48606:48608 Equiv <> st' var
R48582:48585 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R48578:48579 Equiv <> st var
R48581:48581 Imp <> X def
prf 48654:48667 Himp p2_may_diverge
R48701:48702 Coq.Init.Logic <> :type_scope:'~'_x not
R48705:48707 Equiv Himp ::x_'/'_x_'\\'_x not
R48710:48713 Equiv Himp ::x_'/'_x_'\\'_x not
R48703:48704 Equiv Himp p2 def
R48708:48709 Equiv <> st var
R48714:48716 Equiv <> st' var
R48690:48693 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R48686:48687 Equiv <> st var
R48689:48689 Imp <> X def
prf 48857:48867 Himp p1_p2_equiv
R48871:48876 Equiv Himp cequiv def
R48881:48882 Equiv Himp p2 def
R48878:48879 Equiv Himp p1 def
def 49064:49065 Himp p3
R49069:49071 Equiv Himp com ind
R49090:49094 Equiv Himp ::x_';;'_x not
R49079:49083 Equiv Himp ::x_'::='_x not
R49078:49078 Imp <> Z def
R49084:49087 Imp <> ANum constr
R49095:49101 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49129:49137 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49159:49164 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49102:49105 Imp <> BNot constr
R49108:49110 Imp <> BEq constr
R49121:49124 Imp <> ANum constr
R49113:49115 Imp <> AId constr
R49117:49117 Imp <> X def
R49145:49151 Equiv Himp ::x_';;'_x not
R49138:49143 Equiv Himp ::'HAVOC'_x not
R49144:49144 Imp <> X def
R49152:49157 Equiv Himp ::'HAVOC'_x not
R49158:49158 Imp <> Z def
def 49179:49180 Himp p4
R49184:49186 Equiv Himp com ind
R49207:49211 Equiv Himp ::x_';;'_x not
R49194:49199 Equiv Himp ::x_'::='_x not
R49206:49206 Equiv Himp ::x_'::='_x not
R49193:49193 Imp <> X def
R49200:49203 Imp <> ANum constr
R49213:49218 Equiv Himp ::x_'::='_x not
R49225:49225 Equiv Himp ::x_'::='_x not
R49212:49212 Imp <> Z def
R49219:49222 Imp <> ANum constr
prf 49238:49250 Himp p3_p4_inequiv
R49254:49255 Coq.Init.Logic <> :type_scope:'~'_x not
R49256:49261 Equiv Himp cequiv def
R49266:49267 Equiv Himp p4 def
R49263:49264 Equiv Himp p3 def
def 49394:49395 Himp p5
R49399:49401 Equiv Himp com ind
R49408:49414 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49442:49450 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49458:49463 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49415:49418 Imp <> BNot constr
R49421:49423 Imp <> BEq constr
R49434:49437 Imp <> ANum constr
R49426:49428 Imp <> AId constr
R49430:49430 Imp <> X def
R49451:49456 Equiv Himp ::'HAVOC'_x not
R49457:49457 Imp <> X def
def 49478:49479 Himp p6
R49483:49485 Equiv Himp com ind
R49493:49497 Equiv Himp ::x_'::='_x not
R49492:49492 Imp <> X def
R49498:49501 Imp <> ANum constr
prf 49516:49526 Himp p5_p6_equiv
R49530:49535 Equiv Himp cequiv def
R49540:49541 Equiv Himp p6 def
R49537:49538 Equiv Himp p5 def
R49595:49598 Equiv <> <> mod
prf 50281:50311 <> swap_noninterfering_assignments
R50414:50419 Equiv <> cequiv def
R50463:50465 Imp <> ::x_';;'_x not
R50456:50460 Imp <> ::x_'::='_x not
R50454:50455 Equiv <> l2 var
R50461:50462 Equiv <> a2 var
R50468:50472 Imp <> ::x_'::='_x not
R50466:50467 Equiv <> l1 var
R50473:50474 Equiv <> a1 var
R50435:50437 Imp <> ::x_';;'_x not
R50428:50432 Imp <> ::x_'::='_x not
R50426:50427 Equiv <> l1 var
R50433:50434 Equiv <> a1 var
R50440:50444 Imp <> ::x_'::='_x not
R50438:50439 Equiv <> l2 var
R50445:50446 Equiv <> a2 var
R50382:50401 Equiv <> var_not_used_in_aexp ind
R50406:50407 Equiv <> a1 var
R50403:50404 Equiv <> l2 var
R50350:50369 Equiv <> var_not_used_in_aexp ind
R50374:50375 Equiv <> a2 var
R50371:50372 Equiv <> l1 var
R50338:50341 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R50336:50337 Equiv <> l1 var
R50342:50343 Equiv <> l2 var
def 50963:50969 <> capprox
R50980:50982 Imp <> com ind
R51012:51016 Imp <> state def
R51042:51044 Imp <> ::x_'/'_x_'\\'_x not
R51047:51050 Imp <> ::x_'/'_x_'\\'_x not
R51040:51041 Equiv <> c2 var
R51045:51046 Equiv <> st var
R51051:51053 Equiv <> st' var
R51024:51026 Imp <> ::x_'/'_x_'\\'_x not
R51029:51032 Imp <> ::x_'/'_x_'\\'_x not
R51022:51023 Equiv <> c1 var
R51027:51028 Equiv <> st var
R51033:51035 Equiv <> st' var
def 51450:51451 <> c3
R51455:51457 Imp <> com ind
R51481:51485 SfLib <> admit prfax
def 51499:51500 <> c4
R51504:51506 Imp <> com ind
R51530:51534 SfLib <> admit prfax
prf 51546:51560 <> c3_c4_different
R51579:51582 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R51564:51565 Coq.Init.Logic <> :type_scope:'~'_x not
R51566:51572 Equiv <> capprox def
R51577:51578 Equiv <> c4 def
R51574:51575 Equiv <> c3 def
R51583:51584 Coq.Init.Logic <> :type_scope:'~'_x not
R51585:51591 Equiv <> capprox def
R51596:51597 Equiv <> c3 def
R51593:51594 Equiv <> c4 def
def 51717:51720 <> cmin
R51724:51726 Imp <> com ind
R51752:51756 SfLib <> admit prfax
prf 51768:51779 <> cmin_minimal
R51793:51799 Equiv <> capprox def
R51806:51806 Equiv <> c var
R51801:51804 Equiv <> cmin def
def 51983:51987 <> zprop
R51994:51996 Imp <> com ind
R52030:52034 SfLib <> admit prfax
prf 52047:52062 <> zprop_preserving
R52108:52112 Equiv <> zprop def
R52114:52115 Equiv <> c' var
R52092:52098 Equiv <> capprox def
R52102:52103 Equiv <> c' var
R52100:52100 Equiv <> c var
R52081:52085 Equiv <> zprop def
R52087:52087 Equiv <> c var
